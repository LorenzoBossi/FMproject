<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.




//----- CONFIGURATIONS -----

//GRID
const int Nrows = 12;
const int Ncolumns = 10;


const int Ndrones = 2;
const int Ncivilians = 3;
const int Nprofessionals = 1;
 
const int Nexits = 1;
const int Nfires = 5;


typedef int[0,Ncivilians-1] id_civ_t;
typedef int[0,Nprofessionals-1] id_pro_t;
typedef int[0,Ndrones-1] id_dro_t;
typedef int[0,Nrows-1] row_t;
typedef int[0,Ncolumns-1] col_t;

typedef struct{
    row_t row;
    col_t column; 
} Coordinates;


const Coordinates initCivilians[Ncivilians] = {
{0,0},
{5,7},
{11,9}
};

const Coordinates initProfessionals[Nprofessionals] = {
{3,4}
};

const Coordinates initDrones[Ndrones] = {
{0,5},
{5,0}
};

//Fire cells must be contiguous
const Coordinates initFires[Nfires] = {
{7,5},
{7,6},
{7,7},
{7,8},
{7,4}
};

//Exits must be on the boundary of the grid
const Coordinates initExits[Nexits] = {
{9,9}
};


//Assistance

const int droneRadius = 2; //Nv 
const int burningTime = 10; //Tv
const int proAssistanceTime = 3; //Tfr 
const int civAssistanceTime = 4; //Tzr








// ----- DECLARATIONS -----

typedef struct
{
    int[-1,Ncivilians - 1] civilian;
    int[-1,Nprofessionals - 1] professional;
    int[-1,Ndrones - 1] drone;
    bool onFire;
    bool isExit;
} Cell;

//channels
broadcast chan start;
chan detect[Ndrones];
chan moveDrone[Ndrones];
chan moveCivilian[Ncivilians];
chan moveProfessional[Nprofessionals];
chan saveCivilian[Ncivilians];

//clocks
clock globalTime;


Cell grid[Nrows][Ncolumns];
bool isOnTheGrid[Ncivilians];

Coordinates needsHelp[Ncivilians];
int[0,Ncivilians] civInDanger=0;

//CAN PROFESSIONALS DIE??
int[0,Nprofessionals+Ncivilians] casualties;
int[0,Nprofessionals+Ncivilians] survivors;

//Coordinates helpers
int distance(Coordinates p1, Coordinates p2){
    return abs(p1.row-p2.row)+abs(p1.column-p2.column);
}

bool isSamePlace(Coordinates c1, Coordinates c2){
    return c1.row == c2.row &amp;&amp; c1.column == c2.column;
}

//return the index of the help request
int neededHelpAt(Coordinates pos){
    needsHelp[civInDanger].row=pos.row;
    needsHelp[civInDanger].column=pos.column;
    civInDanger++;
    return civInDanger-1;
}
void removeHelpRequestN(int index){
    int i;
    for(i=index;i&lt;civInDanger-1;i++){
        needsHelp[i]=needsHelp[i+1];
    }
    civInDanger--;
}
void noHelpNeededAt(Coordinates pos){
    int i;
    for(i=0;i&lt;civInDanger;i++){
        if(isSamePlace(pos,needsHelp[i])){
            removeHelpRequestN(i);
            return;
        }
    }
}

//even in diagonal?
bool isCloseToFire(Coordinates point){
    int x,y;
    if(grid[point.row][point.column].onFire)
        return true;
    for(i : int[-1,1]){
        for(j: int[-1,1]){
            x= point.row+i;
            y= point.column+j;
            if(x&gt;=0 &amp;&amp; x&lt; Nrows  &amp;&amp;  y&gt;=0 &amp;&amp; y&lt;Ncolumns){
                if(grid[x][y].onFire)
                    return true;
            }

        }
    }
    return false;
}

//even in diagonal?
bool isCloseToExit(Coordinates point){
    int x,y;
    if(grid[point.row][point.column].isExit)
        return true;
    for(i : int[-1,1]){
        for(j: int[-1,1]){
            x= point.row+i;
            y= point.column+j;
            if(x&gt;=0 &amp;&amp; x&lt; Nrows  &amp;&amp;  y&gt;=0 &amp;&amp; y&lt;Ncolumns){
                if(grid[x][y].isExit)
                    return true;
            }

        }
    }
    return false;
}




//MOVING STRATEGIES

bool isValidPosition(int row,int column){
    Cell cell;

    if(row &lt; 0 || column &lt; 0)
        return false;
    if(row &gt; Nrows-1 || column &gt; Ncolumns-1)
        return false;

    cell = grid[row][column];

    if(cell.civilian&gt;=0 || cell.professional&gt;=0)
        return false;

    //should never happen
    if(cell.onFire)
        return false;

    return true;
        
}

Coordinates randomMove(Coordinates currentPos){
    bool validMove;
    int i=0;
    int inc;
    int rand;
    int x,y;
    Coordinates move;

    rand=fint(random(2));
    if (rand == 0)
        inc = +1;
    else
        inc = -1;


    rand= fint(random(4));
    
    do{
        y=currentPos.row;
        x=currentPos.column;

        //switch case not supperted
        if(rand == 0)
            //up
            y--;
        else if(rand == 1)
            //right
            x++;
        else if(rand == 2)
            //down
            y++;
        else if(rand == 3)
            //left
            x--;
        
        validMove=isValidPosition(y,x);

        if(!validMove){
            rand = (rand + inc) % 4;
            i++;
        }    


    }while(!validMove &amp;&amp; i&lt;4);
    
    if(validMove){
        move.row=y;
        move.column=x;
    }
    else
        //if no available moves
        move=currentPos;
     
    return move;
    
}

Coordinates moveToExit(Coordinates currentPos,Coordinates exitPos){
     Coordinates move;
     int row = currentPos.row;
     int column = currentPos.column;

     if(abs(currentPos.row-exitPos.row) &gt; abs(currentPos.column-exitPos.column)) {
        //precedence to row movement
        if(currentPos.row-exitPos.row &gt; 0){
            row--; 
        }else{
            row++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            row=currentPos.row;
            if(currentPos.column-exitPos.column &gt; 0){
                column --;
            }else{
                column ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos);
            }
        }

    }else{
        //precedence to column movement
        if(currentPos.column-exitPos.column &gt; 0){
            column--; 
        }else{
            column++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            column=currentPos.column;
            if(currentPos.row-exitPos.row &gt; 0){
                row --;
            }else{
                row ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos);
            }


        }

    }
}

Coordinates getClosestExit(Coordinates pos){
    Coordinates min;
    int minDistance;
    int temp;
    int i;
    min= initExits[0];//suppose at least an exit
    minDistance = distance(pos,min);
    
    for( i=1; i&lt;Nexits-1; i++){
        temp=distance(pos,initExits[i]);
        if(temp&lt;minDistance){
            minDistance=temp;
            min=initExits[i];
        }      
    }
    
    return min;

}



</declaration>
	<template>
		<name>Professional</name>
		<parameter>const id_pro_t id</parameter>
		<declaration>Coordinates currentPos;

void move(){

    Coordinates pos = randomMove(currentPos);

    grid[currentPos.row][currentPos.column].professional=-1;
    grid[pos.row][pos.column].professional=id;
    currentPos=pos;
}</declaration>
		<location id="id0" x="-510" y="0">
		</location>
		<location id="id1" x="-187" y="0">
			<urgent/>
		</location>
		<location id="id2" x="-841" y="0">
			<urgent/>
		</location>
		<init ref="id2"/>
		<transition id="id3">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-680" y="-17">start?</label>
			<label kind="assignment" x="-790" y="0">currentPos=initProfessionals[id]</label>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<nail x="-348" y="-127"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-425" y="-25">moveProfessional[id]?</label>
			<label kind="assignment" x="-365" y="0">move()</label>
		</transition>
	</template>
	<template>
		<name>Drone</name>
		<parameter>const id_dro_t id</parameter>
		<declaration>Coordinates currentPos;

bool isGoingBack=false;



Coordinates moveHorizontally(Coordinates currPos){
    Coordinates move;
    move.row=currPos.row;
    move.column=currPos.column;

    if(isGoingBack){
        if(currPos.column - droneRadius &lt;=0){
            isGoingBack=false;
            move.column++;
            return move;
        }
        move.column--;

    }else{
        if(currPos.column + droneRadius &gt;= Ncolumns-1){
            isGoingBack=true;
            move.column--;
            return move;
        }
        move.column++;
    }

    return move;

}

Coordinates moveVertically(Coordinates currPos){
    Coordinates move;
    move.row=currPos.row;
    move.column=currPos.column;

    if(isGoingBack){
        if(currPos.row - droneRadius &lt;=0){
            isGoingBack=false;
            move.row++;
            return move;
        }
        move.row--;

    }else{
        if(currPos.row + droneRadius &gt;= Nrows-1){
            isGoingBack=true;
            move.row--;
            return move;
        }
        move.row++;
    }

    return move;

}

//what happens if 2 drones occupy the same cell?
void move(){
    Coordinates pos;
    pos = moveHorizontally(currentPos);
    grid[currentPos.row][currentPos.column].drone=-1;
    grid[pos.row][pos.column].drone=id;
    currentPos=pos;
}

</declaration>
		<location id="id6" x="-518" y="-34">
		</location>
		<location id="id7" x="-297" y="-34">
			<urgent/>
		</location>
		<location id="id8" x="-93" y="-34">
			<urgent/>
		</location>
		<location id="id9" x="-807" y="-34">
			<urgent/>
		</location>
		<init ref="id9"/>
		<transition id="id10">
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-663" y="-51">start?</label>
			<label kind="assignment" x="-756" y="-34">currentPos=initDrones[id]</label>
		</transition>
		<transition id="id11">
			<source ref="id8"/>
			<target ref="id6"/>
			<nail x="-297" y="-212"/>
		</transition>
		<transition id="id12">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-255" y="-51">moveDrone[id]?</label>
			<label kind="assignment" x="-229" y="-34">move()</label>
		</transition>
		<transition id="id13">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-450" y="-51">detect[id]?</label>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>const id_civ_t id</parameter>
		<declaration>Coordinates currentPos;
double finishTime = -1;

clock burningTimer;

void move(){
    //random move
    //Coordinates pos = randomMove(currentPos);
    
    //to closest exit
    Coordinates closestExit = getClosestExit(currentPos);//can be computed only one time
    Coordinates pos = moveToExit(currentPos,closestExit);

    grid[currentPos.row][currentPos.column].civilian=-1;
    grid[pos.row][pos.column].civilian=id;
    currentPos=pos;
}

void die(){
    isOnTheGrid[id]=false;
    noHelpNeededAt(currentPos);
    casualties++;
    grid[currentPos.row][currentPos.column].civilian=-1;
    finishTime=globalTime;
}

void escape(){
    isOnTheGrid[id]=false;
    survivors++;
    grid[currentPos.row][currentPos.column].civilian=-1;
    finishTime=globalTime;
}
</declaration>
		<location id="id14" x="-943" y="-238">
		</location>
		<location id="id15" x="-492" y="-238">
			<label kind="comments" x="-314" y="-221">close even in diagonal??</label>
			<urgent/>
		</location>
		<location id="id16" x="110" y="-238">
			<urgent/>
		</location>
		<location id="id17" x="-170" y="-510">
			<name x="-204" y="-484">burning</name>
			<label kind="invariant" x="-221" y="-459">burningTimer
     &lt;=
burningTime</label>
		</location>
		<location id="id18" x="306" y="-510">
			<name x="296" y="-544">dead</name>
		</location>
		<location id="id19" x="391" y="-238">
			<name x="381" y="-272">safe</name>
		</location>
		<location id="id20" x="-493" y="-25">
			<urgent/>
		</location>
		<init ref="id20"/>
		<transition id="id21">
			<source ref="id20"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-484" y="-119">start?</label>
			<label kind="assignment" x="-484" y="-102">currentPos=initCivilians[id]</label>
		</transition>
		<transition id="id22">
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="assignment" x="221" y="-238">escape()</label>
		</transition>
		<transition id="id23">
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="8" y="-535">burningTimer&gt;=burningTime</label>
			<label kind="assignment" x="76" y="-510">die()</label>
		</transition>
		<transition id="id24">
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-8" y="-374">burningTimer&lt;=burningTime</label>
			<label kind="synchronisation" x="-8" y="-399">saveCivilian[id]?</label>
			<label kind="assignment" x="-8" y="-425">noHelpNeededAt(currentPos)</label>
		</transition>
		<transition id="id25">
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-237" y="-637">moveCivilian[id]?</label>
			<nail x="-229" y="-603"/>
			<nail x="-118" y="-603"/>
		</transition>
		<transition id="id26">
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="-569" y="-408">!isCloseToExit(currentPos) &amp;&amp;
isCloseToFire(currentPos)</label>
			<label kind="assignment" x="-569" y="-450">burningTimer=0,
neededHelpAt(currentPos)</label>
		</transition>
		<transition id="id27">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-314" y="-263">isCloseToExit(currentPos)</label>
		</transition>
		<transition id="id28">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-875" y="-144">!isCloseToExit(currentPos) &amp;&amp;
!isCloseToFire(currentPos)</label>
			<nail x="-773" y="-161"/>
		</transition>
		<transition id="id29">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-815" y="-263">moveCivilian[id]?</label>
			<label kind="assignment" x="-772" y="-238">move()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Clock</name>
		<declaration>// Place local declarations here.
clock moveTimer;



int counter;

void initGrid(){
    
    for ( i : id_civ_t)
        isOnTheGrid[i]=true;

    //empty grid
    for (i : row_t){
        for(j : col_t){
        grid[i][j].civilian=-1;
        grid[i][j].professional=-1;
        grid[i][j].drone=-1;
        grid[i][j].onFire=false;
        grid[i][j].isExit=false;
        }
    }

    //init fires
    for (i : int[0,Nfires-1])
        {
            Coordinates fire = initFires[i];
            grid[fire.row][fire.column].onFire = true;
        }

    //init exits
    for (i : int[0,Nexits-1])
        {
            Coordinates safeExit = initExits[i];
            grid[safeExit.row][safeExit.column].isExit = true;
        }

    //init civilians
    for (i : id_civ_t)
        {
            Coordinates civilian = initCivilians[i];
            grid[civilian.row][civilian.column].civilian = i;
        }

    //init professionals
    for (i : id_pro_t)
        {
            Coordinates professional = initProfessionals[i];
            grid[professional.row][professional.column].professional = i;
        }

    //init drones
    for (i : id_dro_t)
        {
            Coordinates drone = initDrones[i];
            grid[drone.row][drone.column].drone = i;
        }

}

</declaration>
		<location id="id30" x="-1037" y="51">
			<urgent/>
		</location>
		<location id="id31" x="-561" y="-127">
			<name x="-680" y="-136">droneDetect</name>
			<urgent/>
		</location>
		<location id="id32" x="-153" y="-127">
			<name x="-204" y="-110">moveCivilians</name>
			<urgent/>
		</location>
		<location id="id33" x="187" y="-127">
			<name x="127" y="-110">moveProfessionals</name>
			<urgent/>
		</location>
		<location id="id34" x="561" y="-127">
			<name x="586" y="-135">moveDrones</name>
			<urgent/>
		</location>
		<location id="id35" x="-561" y="51">
			<name x="-595" y="8">waitTick</name>
			<label kind="invariant" x="-603" y="68">moveTimer&lt;=1</label>
		</location>
		<location id="id36" x="-561" y="-340">
			<urgent/>
		</location>
		<location id="id37" x="552" y="-374">
			<urgent/>
		</location>
		<location id="id38" x="-153" y="-340">
			<urgent/>
		</location>
		<location id="id39" x="187" y="-348">
			<label kind="comments" x="85" y="-391">CAN PROFESSIONALS DIE/ESCAPE?</label>
			<urgent/>
		</location>
		<location id="id40" x="-153" y="-527">
			<urgent/>
		</location>
		<location id="id41" x="-875" y="51">
			<urgent/>
		</location>
		<init ref="id30"/>
		<transition id="id42">
			<source ref="id41"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-748" y="25">start!</label>
		</transition>
		<transition id="id43">
			<source ref="id38"/>
			<target ref="id40"/>
			<label kind="guard" x="-263" y="-459">!isOnTheGrid[counter]</label>
		</transition>
		<transition id="id44">
			<source ref="id38"/>
			<target ref="id40"/>
			<label kind="guard" x="-484" y="-476">isOnTheGrid[counter]</label>
			<label kind="synchronisation" x="-484" y="-459">moveCivilian[counter]!</label>
			<nail x="-289" y="-382"/>
			<nail x="-289" y="-501"/>
		</transition>
		<transition id="id45">
			<source ref="id40"/>
			<target ref="id32"/>
			<label kind="assignment" x="-111" y="-246">counter++</label>
			<nail x="-68" y="-459"/>
			<nail x="-68" y="-263"/>
		</transition>
		<transition id="id46">
			<source ref="id39"/>
			<target ref="id33"/>
			<label kind="assignment" x="221" y="-289">counter++</label>
			<nail x="212" y="-238"/>
		</transition>
		<transition id="id47">
			<source ref="id33"/>
			<target ref="id39"/>
			<label kind="guard" x="-42" y="-280">counter &lt; Nprofessionals</label>
			<label kind="synchronisation" x="-42" y="-297">moveProfessional[counter]!</label>
			<nail x="161" y="-238"/>
		</transition>
		<transition id="id48">
			<source ref="id32"/>
			<target ref="id38"/>
			<label kind="guard" x="-331" y="-272">counter &lt; Ncivilians</label>
			<nail x="-153" y="-280"/>
		</transition>
		<transition id="id49">
			<source ref="id37"/>
			<target ref="id34"/>
			<label kind="assignment" x="586" y="-323">counter++</label>
			<nail x="595" y="-255"/>
		</transition>
		<transition id="id50">
			<source ref="id34"/>
			<target ref="id37"/>
			<label kind="guard" x="374" y="-340">counter&lt;Ndrones</label>
			<label kind="synchronisation" x="374" y="-323">moveDrone[counter]!</label>
			<nail x="518" y="-263"/>
		</transition>
		<transition id="id51">
			<source ref="id36"/>
			<target ref="id31"/>
			<label kind="assignment" x="-510" y="-263">counter++</label>
			<nail x="-518" y="-246"/>
		</transition>
		<transition id="id52">
			<source ref="id31"/>
			<target ref="id36"/>
			<label kind="guard" x="-748" y="-246">counter&lt;Ndrones</label>
			<label kind="synchronisation" x="-756" y="-263">detect[counter]!</label>
			<nail x="-603" y="-246"/>
		</transition>
		<transition id="id53">
			<source ref="id35"/>
			<target ref="id31"/>
			<label kind="guard" x="-552" y="-17">moveTimer==1</label>
			<label kind="assignment" x="-552" y="-59">moveTimer=0,
counter=0</label>
		</transition>
		<transition id="id54">
			<source ref="id34"/>
			<target ref="id35"/>
			<label kind="guard" x="-195" y="51">counter == Ndrones</label>
			<nail x="561" y="51"/>
		</transition>
		<transition id="id55">
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="272" y="-153">counter==Nprofessionals</label>
			<label kind="assignment" x="331" y="-127">counter=0</label>
		</transition>
		<transition id="id56">
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="guard" x="-68" y="-153">counter == Ncivilians</label>
			<label kind="assignment" x="-17" y="-127">counter=0</label>
		</transition>
		<transition id="id57">
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-374" y="-161">counter == Ndrones</label>
			<label kind="assignment" x="-331" y="-127">counter=0</label>
		</transition>
		<transition id="id58">
			<source ref="id30"/>
			<target ref="id41"/>
			<label kind="assignment" x="-1003" y="59">initGrid(),
globalTime=0,
moveTimer=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Clock,Drone,Civilian,Professional;

</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
