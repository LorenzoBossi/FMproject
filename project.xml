<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.





//----- CONFIGURATIONS -----


//BIG GRID SCENARIO


//STOCHASTIC FEATURES
//must be [0,1]
const double pFail = 0.1;
const double pListen= 0.8;

//GRID
const int Nrows = 20;
const int Ncolumns = 20;

const bool disableDrones=false;
const int Ndrones = 2;
const int Ncivilians = 15;
const int Nprofessionals = 5;
 
const int Nexits = 8;
const int Nfires = 46;


typedef int[0,Ncivilians-1] id_civ_t;
typedef int[0,Nprofessionals-1] id_pro_t;
typedef int[0,Ndrones-1] id_dro_t;
typedef int[0,Nrows-1] row_t;
typedef int[0,Ncolumns-1] col_t;

typedef struct{
    row_t row;
    col_t column; 
} Coordinates_t;


const Coordinates_t initCivilians[Ncivilians] = {
{4,11},
{5,3},
{5,15},
{6,5},
{7,2},
{7,13},
{8,16},
{9,4},
{10,13},
{11,2},
{11,17},
{12,5},
{14,3},
{15,7},
{17,10}
};

const Coordinates_t initProfessionals[Nprofessionals] = {
{3,2},
{5,13},
{10,18},
{12,1},
{17,6}
};

const Coordinates_t initDrones[Ndrones] = {

{5,15},
{14,4}

};


const Coordinates_t initFires[Nfires] = {
{3,5},
{3,6},

{4,6},
{4,7},
{4,8},

{5,7},
{5,8},

{6,7},
{6,8},
{6,9},

{7,8},
{7,9},
{7,10},

{8,7},
{8,8},
{8,9},

{9,6},
{9,7},
{9,8},

{10,7},
{10,8},
{10,9},
{10,10},

{11,8},
{11,9},
{11,10},

{12,9},

{13,9},
{13,10},
{13,12},
{13,13},
{13,14},
{13,15},

{14,10},
{14,11},
{14,12},
{14,13},
{14,14},
{14,15},
{14,16},

{15,11},
{15,12},
{15,15},
{15,16},
{15,17},

{16,17}
};

//Exits must be on the boundary of the grid
const Coordinates_t initExits[Nexits] = {
{0,3},
{0,4},
{0,15},
{0,16},
{19,3},
{19,4},
{19,15},
{19,16}
};


//Assistance

const int droneRadius = 4; //Nv 
const int burningTime = 22; //Tv
const int proAssistanceTime = 5; //Tfr 
const int civAssistanceTime = 10; //Tzr

const int targetFireDistance=2;

const bool droneMoveHorizontally=true;
const bool droneMoveVertically=false;
const bool droneMoveCircle=false;
const int diameter=0;
const int droneLimitDecisionDistance=5;

const int randomness=100;



// ----- DECLARATIONS -----

typedef struct
{
    int[-1,Ncivilians - 1] civilian;
    int[-1,Nprofessionals - 1] professional;
    int[-1,Ndrones - 1] drone;
    bool onFire;
    bool isExit;
} Cell_t;

typedef struct
{
    bool isInDanger;
    bool isBusy;
    bool isOnTheGrid;
    Coordinates_t currentPosition;
    id_civ_t civToHelp;
    id_pro_t proToCall;
} Civilian_t;

typedef struct
{
    bool isBusy;
    Coordinates_t currentPosition;
    id_civ_t caller;
    id_civ_t victimToSave;
} Professional_t;

//channels
broadcast chan start;
chan detect[Ndrones];
chan moveDrone[Ndrones];
chan moveCivilian[Ncivilians];
chan moveProfessional[Nprofessionals];
chan startHelping[Ncivilians];
chan saveCivilian[Ncivilians];
broadcast chan died[Ncivilians];
chan civHelpCiv[Ncivilians];
chan civCallPro[Ncivilians];
chan helpRequest[Nprofessionals];

//clocks
clock globalTime;

int pickRandomModulus(){
    if(randomness&gt;=4){
        return randomness;
    }
    else{
        return 4;
    }
}
const int randomModulus = pickRandomModulus();
int[0,randomModulus] randomSeed;
int randomTime=0;
Cell_t grid[Nrows][Ncolumns];
Civilian_t civilians[Ncivilians];
Professional_t professionals[Nprofessionals];




int[0,Ncivilians] civInDanger=0;

int[0,Ncivilians] casualties=0;
int[0,Ncivilians] survivors=0;
int[0,100] survivorsPerc=0;
int[0,100] casualtiesPerc=0;

//Coordinates helpers
int distance(Coordinates_t p1, Coordinates_t p2){
    return abs(p1.row-p2.row)+abs(p1.column-p2.column);
}

bool isSamePlace(Coordinates_t c1, Coordinates_t c2){
    return c1.row == c2.row &amp;&amp; c1.column == c2.column;
}

//return the index of the help request
void neededHelpAt(Coordinates_t pos){
    civilians[grid[pos.row][pos.column].civilian].isInDanger=true;
    civInDanger++;
}

void noHelpNeededAt(Coordinates_t pos){
    civilians[grid[pos.row][pos.column].civilian].isInDanger=false;
    civInDanger--;
}

void noHelpNeeded(id_civ_t idCivilian){
    civilians[idCivilian].isInDanger=false;
    civInDanger--;
}


bool isCloseToFire(Coordinates_t point){
    int x,y;
    if(grid[point.row][point.column].onFire)
        return true;
    
    x= point.row+1;
    y= point.column;
    if(x&lt; Nrows){
        if(grid[x][y].onFire)
            return true;      
    }
    x= point.row-1;
    y= point.column;
    if(x&gt;=0){
        if(grid[x][y].onFire)
            return true;      
    }
    x= point.row;
    y= point.column+1;
    if(y&lt;Ncolumns){
        if(grid[x][y].onFire)
            return true;     
    }
    x= point.row;
    y= point.column-1;
    if(y&gt;=0){
        if(grid[x][y].onFire)
            return true;       
    }
       
    return false;
}


bool isCloseToExit(Coordinates_t point){
    int x,y;
    if(grid[point.row][point.column].isExit)
        return true;
    
    x= point.row+1;
    y= point.column;
    if(x&lt; Nrows){
        if(grid[x][y].isExit)
            return true;      
    }
    x= point.row-1;
    y= point.column;
    if(x&gt;=0){
        if(grid[x][y].isExit)
            return true;       
    }
    x= point.row;
    y= point.column+1;
    if(y&lt;Ncolumns){
        if(grid[x][y].isExit)
            return true;       
    }
    x= point.row;
    y= point.column-1;
    if(y&gt;=0){
        if(grid[x][y].isExit)
            return true;
    }
       
    return false;
}

void increaseCasualties(){
    casualties++;
    casualtiesPerc=fint((1.0*casualties/Ncivilians)*100);
}

void increaseSurvivors(){
    survivors++;
    survivorsPerc=fint((1.0*survivors/Ncivilians)*100);
}



//MOVING STRATEGIES

bool isValidPosition(int row,int column){
    Cell_t cell;

    if(row &lt; 0 || column &lt; 0)
        return false;
    if(row &gt; Nrows-1 || column &gt; Ncolumns-1)
        return false;

    cell = grid[row][column];

    if(cell.civilian&gt;=0 || cell.professional&gt;=0)
        return false;

    //should never happen
    if(cell.onFire)
        return false;

    return true;
        
}



void updateRandomSeed(int id){
    int time = randomTime;
    randomSeed=((randomSeed+id)^time) % randomModulus;
    
}

//id used for randomness
Coordinates_t randomMove(Coordinates_t currentPos, int id){
    bool validMove;
    int i=0;
    int inc;
    int rand;
    int x,y;
    Coordinates_t move;

    rand= randomSeed % 2;
    if (rand == 0)
        inc = +1;
    else
        inc = -1;

    updateRandomSeed(id);

    rand = randomSeed % 4;
    
    updateRandomSeed(id);
    do{
        y=currentPos.row;
        x=currentPos.column;

        //switch case not supperted
        if(rand == 0)
            //up
            y--;
        else if(rand == 1)
            //right
            x++;
        else if(rand == 2)
            //down
            y++;
        else if(rand == 3)
            //left
            x--;
        
        validMove=isValidPosition(y,x);

        if(!validMove){
            rand = (rand + inc) % 4;
            i++;
        }    


    }while(!validMove &amp;&amp; i&lt;4);
    
    if(validMove){
        move.row=y;
        move.column=x;
    }
    else
        //if no available moves
        move=currentPos;
     
    return move;
    
}


Coordinates_t moveToExit(Coordinates_t currentPos,Coordinates_t exitPos,int id){
     Coordinates_t move;
     int row = currentPos.row;
     int column = currentPos.column;

     if(abs(currentPos.row-exitPos.row) &gt; abs(currentPos.column-exitPos.column)) {
        //precedence to row movement
        if(currentPos.row-exitPos.row &gt; 0){
            row--; 
        }else{
            row++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            row=currentPos.row;
            if(currentPos.column-exitPos.column &gt; 0){
                column --;
            }else{
                column ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos,id);
            }
        }

    }else{
        //precedence to column movement
        if(currentPos.column-exitPos.column &gt; 0){
            column--; 
        }else{
            column++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            column=currentPos.column;
            if(currentPos.row-exitPos.row &gt; 0){
                row --;
            }else{
                row ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos,id);
            }


        }

    }
}


Coordinates_t moveToFire(Coordinates_t currentPos,Coordinates_t firePos,int id){
     Coordinates_t move;
     int row = currentPos.row;
     int column = currentPos.column;
     if(distance(currentPos,firePos)&lt;=targetFireDistance){
        return randomMove(currentPos,id);
     }

     if(abs(currentPos.row-firePos.row) &gt; abs(currentPos.column-firePos.column)) {
        //precedence to row movement
        if(currentPos.row-firePos.row &gt; 0){
            row--; 
        }else{
            row++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            row=currentPos.row;
            if(currentPos.column-firePos.column &gt; 0){
                column --;
            }else{
                column ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos,id);
            }
        }

    }else{
        //precedence to column movement
        if(currentPos.column-firePos.column &gt; 0){
            column--; 
        }else{
            column++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            column=currentPos.column;
            if(currentPos.row-firePos.row &gt; 0){
                row --;
            }else{
                row ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos,id);
            }


        }

    }
}

Coordinates_t getClosestExit(Coordinates_t pos){
    Coordinates_t min;
    int minDistance;
    int temp;
    int i;
    min= initExits[0];//suppose at least an exit
    minDistance = distance(pos,min);
    
    for( i=1; i&lt;Nexits-1; i++){
        temp=distance(pos,initExits[i]);
        if(temp&lt;minDistance){
            minDistance=temp;
            min=initExits[i];
        }      
    }
    
    return min;

}

Coordinates_t getClosestFire(Coordinates_t pos){
    Coordinates_t min;
    int minDistance;
    int temp;
    int i;
    min= initFires[0];//suppose at least an exit
    minDistance = distance(pos,min);
    
    for( i=1; i&lt;Nexits-1; i++){
        temp=distance(pos,initFires[i]);
        if(temp&lt;minDistance){
            minDistance=temp;
            min=initFires[i];
        }      
    }
    
    return min;

}



</declaration>
	<template>
		<name>Professional</name>
		<parameter>const id_pro_t id</parameter>
		<declaration>
id_civ_t civToHelp=0;
int timeToSave=0;

clock helpingTimer;



void setCurrPos(Coordinates_t pos){
    professionals[id].currentPosition.row = pos.row;
    professionals[id].currentPosition.column = pos.column;
}
Coordinates_t getCurrPos(){
    return professionals[id].currentPosition;
}


void move(){

    Coordinates_t pos,currentPos=getCurrPos();
    //pos = randomMove(currentPos,id);
    pos = moveToFire(currentPos,getClosestFire(currentPos),id);

    grid[currentPos.row][currentPos.column].professional=-1;
    grid[pos.row][pos.column].professional=id;
    setCurrPos(pos);
}

bool someoneNearToHelp(){
    int i;
    for(i=0;i&lt;Ncivilians;i++){
        if(civilians[i].isInDanger  &amp;&amp; !civilians[i].isBusy &amp;&amp; civilians[i].isOnTheGrid){
            if(distance(getCurrPos(), civilians[i].currentPosition)&lt;=1){
                return true;
            }
        }
    }
    return false;
}

void chooseCivToHelp(){
    int i,distanceToCiv;
    for(i=0;i&lt;Ncivilians;i++){
        if(civilians[i].isInDanger &amp;&amp; !civilians[i].isBusy &amp;&amp; civilians[i].isOnTheGrid){
            distanceToCiv=distance(getCurrPos(), civilians[i].currentPosition);
            if(distanceToCiv &lt;=1){
                civToHelp=i;
                timeToSave=distanceToCiv + proAssistanceTime;
                civilians[i].isBusy=true;
                professionals[id].isBusy=true;
                return;
            }
        }
    }
   
}

id_civ_t getCaller(){
    return professionals[id].caller;
}

id_civ_t getVictimToSave(){
    return professionals[id].victimToSave;
}    

void setRequestTime(){
    id_civ_t caller = getCaller();
    id_civ_t victimToSave= getVictimToSave();
    timeToSave = distance(civilians[caller].currentPosition,getCurrPos())+distance(getCurrPos(),civilians[victimToSave].currentPosition)+proAssistanceTime;
    
}



</declaration>
		<location id="id0" x="-442" y="17">
			<name x="-518" y="-8">canMove</name>
		</location>
		<location id="id1" x="59" y="17">
			<committed/>
		</location>
		<location id="id2" x="-910" y="17">
			<urgent/>
		</location>
		<location id="id3" x="-442" y="271">
			<name x="-391" y="245">helping</name>
			<label kind="invariant" x="-426" y="262">helpingTimer&lt;=timeToSave</label>
		</location>
		<location id="id4" x="-443" y="501">
			<committed/>
		</location>
		<location id="id5" x="-782" y="-569">
			<label kind="invariant" x="-1029" y="-578">helpingTimer &lt;= timeToSave</label>
		</location>
		<location id="id6" x="-238" y="-569">
			<label kind="invariant" x="-204" y="-578">helpingTimer &lt;= timeToSave</label>
		</location>
		<location id="id7" x="-442" y="-255">
			<committed/>
		</location>
		<location id="id8" x="-782" y="-348">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-1062" y="-450">startHelping[getVictimToSave()]!</label>
		</transition>
		<transition id="id10">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-289" y="-476">helpingTimer == timeToSave</label>
		</transition>
		<transition id="id11">
			<source ref="id7"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-433" y="-195">saveCivilian[getCaller()]!</label>
			<label kind="assignment" x="-433" y="-170">professionals[id].isBusy=false</label>
		</transition>
		<transition id="id12">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="-671" y="-510">helpingTimer==timeToSave</label>
			<label kind="synchronisation" x="-671" y="-493">saveCivilian[getVictimToSave()]!</label>
		</transition>
		<transition id="id13">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-595" y="-595">died[getVictimToSave()]?</label>
		</transition>
		<transition id="id14">
			<source ref="id0"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-909" y="-246">helpRequest[id]?</label>
			<label kind="assignment" x="-909" y="-229">setRequestTime(),
helpingTimer=0,
professionals[id].isBusy=true</label>
		</transition>
		<transition id="id15">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="67" y="246">someoneNearToHelp()</label>
			<label kind="assignment" x="67" y="267">chooseCivToHelp()</label>
			<nail x="59" y="501"/>
		</transition>
		<transition id="id16">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-434" y="373">startHelping[civToHelp]!</label>
			<label kind="assignment" x="-434" y="390">helpingTimer=0</label>
		</transition>
		<transition id="id17">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-630" y="110">died[civToHelp]?</label>
			<label kind="assignment" x="-714" y="127">professionals[id].isBusy=false</label>
			<nail x="-476" y="110"/>
		</transition>
		<transition id="id18">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-392" y="102">helpingTimer==timeToSave</label>
			<label kind="synchronisation" x="-392" y="119">saveCivilian[civToHelp]!</label>
			<label kind="assignment" x="-391" y="135">professionals[id].isBusy=false</label>
			<nail x="-408" y="110"/>
		</transition>
		<transition id="id19">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-791" y="-8">start?</label>
			<label kind="assignment" x="-851" y="25">setCurrPos(initProfessionals[id])</label>
		</transition>
		<transition id="id20">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-136" y="-127">!someoneNearToHelp()</label>
			<label kind="assignment" x="-85" y="-102">move()</label>
			<nail x="59" y="-102"/>
			<nail x="-212" y="-102"/>
		</transition>
		<transition id="id21">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-357" y="-8">moveProfessional[id]?</label>
			<nail x="-179" y="17"/>
		</transition>
	</template>
	<template>
		<name>Drone</name>
		<parameter>const id_dro_t id</parameter>
		<declaration>Coordinates_t currentPos;

bool isGoingBack=false;
int[0,diameter] circleCounter=0;
int[0,3] direction=0;
//0:right
//1:down
//2:left
//3:up
id_civ_t closeVictims[Ncivilians];
id_civ_t closeSurvivors[Ncivilians];

int[0,Ncivilians] victimsDetected=0,survivorsDetected=0;

typedef struct{
    bool doNothing;
    bool callProfessional;
    id_pro_t professional;
    id_civ_t survivor;
    id_civ_t victim;
}action_t;

action_t action;

Coordinates_t moveHorizontally(Coordinates_t currPos){
    Coordinates_t move;
    move.row=currPos.row;
    move.column=currPos.column;

    if(isGoingBack){
        if(currPos.column - droneRadius &lt;=0){
            isGoingBack=false;
            move.column++;
            return move;
        }
        move.column--;

    }else{
        if(currPos.column + droneRadius &gt;= Ncolumns-1){
            isGoingBack=true;
            move.column--;
            return move;
        }
        move.column++;
    }

    return move;

}

Coordinates_t moveVertically(Coordinates_t currPos){
    Coordinates_t move;
    move.row=currPos.row;
    move.column=currPos.column;

    if(isGoingBack){
        if(currPos.row - droneRadius &lt;=0){
            isGoingBack=false;
            move.row++;
            return move;
        }
        move.row--;

    }else{
        if(currPos.row + droneRadius &gt;= Nrows-1){
            isGoingBack=true;
            move.row--;
            return move;
        }
        move.row++;
    }

    return move;

}

Coordinates_t moveCircle(Coordinates_t currPos){
    Coordinates_t move;
    move.row=currPos.row;
    move.column=currPos.column;
    if(direction==0){
        //Right
        move.column++;
    }else if(direction==1){
        //Down
        move.row++;
    }
    else if(direction==2){
        //Left
        move.column--;
    }else if(direction==3){
        //Up
        move.row--;
    }

    circleCounter++;
    if(circleCounter==diameter-1){
        direction=(direction+1) % 4;
        circleCounter=0;
    }

    return move;

}

void move(){
    Coordinates_t pos;
    if(droneMoveHorizontally)
        pos = moveHorizontally(currentPos);
    else if(droneMoveVertically){
        pos = moveVertically(currentPos);
    }else{
        pos = moveCircle(currentPos);
    }
    grid[currentPos.row][currentPos.column].drone=-1;
    grid[pos.row][pos.column].drone=id;
    currentPos=pos;
}

void clearDetectionData(){
    id_civ_t emptyCiv;
    action_t emptyAction;
    int i;
    for(i=0; i&lt;victimsDetected; i++){
        closeVictims[i]=emptyCiv;
    }
    for(i=0; i&lt;survivorsDetected; i++){
        closeSurvivors[i]=emptyCiv;
    }
    victimsDetected=0;
    survivorsDetected=0;
    action=emptyAction;

}



void detectCivInDanger(){
    int i;
    if(disableDrones){
        return;
    }
    clearDetectionData();
    for(i=0;i&lt;Ncivilians;i++){
            if(distance(civilians[i].currentPosition,currentPos)&lt;= droneRadius){
                if(civilians[i].isInDanger &amp;&amp; !civilians[i].isBusy){
                    closeVictims[victimsDetected]=i;
                    victimsDetected++;
                }else if(!civilians[i].isInDanger &amp;&amp; !civilians[i].isBusy &amp;&amp; civilians[i].isOnTheGrid){
                    closeSurvivors[survivorsDetected]=i;
                    survivorsDetected++;
                }
            }
        
    }
     
}


int getClosestFreePro(Coordinates_t position){
    int minDistance=Nrows+Ncolumns;
    int pro=-1;
    for(i : id_pro_t){
        if(!professionals[i].isBusy &amp;&amp; distance(position,professionals[i].currentPosition) &lt; minDistance){
            pro=i;
            minDistance=distance(position,professionals[i].currentPosition);
        }
    }
    return pro;

}

id_civ_t getClosestSurvivor(Coordinates_t position){
    int minDistance=Nrows+Ncolumns;
    id_civ_t civ,survivor;
    int i;
    for(i=0;i&lt;survivorsDetected;i++){
        survivor=closeSurvivors[i];
        if(distance(position,civilians[survivor].currentPosition) &lt; minDistance){
            civ=survivor;
            minDistance=distance(position,civilians[survivor].currentPosition);
        }
    }
    return civ;

}




void evaluateAction(){
    if(victimsDetected&gt;0 &amp;&amp; survivorsDetected&gt;0){
        id_civ_t victim,survivor;
        id_pro_t pro;
        int findPro;
        victim=closeVictims[0];
        survivor=getClosestSurvivor(civilians[victim].currentPosition);
        findPro=getClosestFreePro(civilians[survivor].currentPosition);

        action.survivor=survivor;
        action.victim=victim;
        action.callProfessional=false;
        action.doNothing=false;

        if(findPro&gt;=0){
            pro=findPro;
            if(distance(professionals[pro].currentPosition,civilians[survivor].currentPosition)&lt;=droneLimitDecisionDistance){
                action.professional=pro;
                action.callProfessional=true;
            }
        }
    }else
        action.doNothing=true;
}

void updateDetectedList(){
    int i;
    bool found;
    if(victimsDetected&gt;0){
        found=closeVictims[0]==action.victim;
        for(i=0;i&lt;victimsDetected-1;i++){
            if(found){
                closeVictims[i]=closeVictims[i+1];
            }else if(closeVictims[i]==action.victim){
                found=true;
            }
        }
        if(closeVictims[i]==action.survivor)
            found=true;
        if(found){ 
            victimsDetected--;
            closeVictims[victimsDetected]=0;
        }
    }
    if(survivorsDetected&gt;0){
        found=closeSurvivors[0]==action.survivor;
        for(i=0;i&lt;survivorsDetected-1;i++){
            if(found){
                closeSurvivors[i]=closeSurvivors[i+1];
            }else if(closeSurvivors[i]==action.survivor){
                found=true;
            }
        }
        if(closeSurvivors[i]==action.survivor)
            found=true;
        if(found){
            survivorsDetected--;
            closeSurvivors[survivorsDetected]=0;
        } 
    }

}

</declaration>
		<location id="id22" x="-510" y="-246">
			<name x="-535" y="-229">canDetect</name>
		</location>
		<location id="id23" x="-280" y="-246">
			<committed/>
		</location>
		<location id="id24" x="-799" y="-246">
			<urgent/>
		</location>
		<location id="id25" x="-17" y="-246">
			<name x="0" y="-255">canMove</name>
			<urgent/>
		</location>
		<location id="id26" x="-280" y="-34">
			<name x="-263" y="-42">takingAction</name>
			<committed/>
		</location>
		<location id="id27" x="-280" y="51">
			<name x="-263" y="42">actionNeeded</name>
			<committed/>
		</location>
		<location id="id28" x="-280" y="340">
			<committed/>
		</location>
		<init ref="id24"/>
		<transition id="id29">
			<source ref="id28"/>
			<target ref="id26"/>
			<label kind="assignment" x="-943" y="153">updateDetectedList(),
evaluateAction()</label>
			<nail x="-765" y="340"/>
			<nail x="-765" y="-34"/>
		</transition>
		<transition id="id30">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="guard" x="-510" y="161">!action.callProfessional</label>
			<label kind="synchronisation" x="-544" y="178">civHelpCiv[action.survivor]!</label>
			<label kind="assignment" x="-722" y="195">civilians[action.survivor].civToHelp=action.victim</label>
			<nail x="-263" y="195"/>
		</transition>
		<transition id="id31">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="guard" x="-246" y="144">action.callProfessional</label>
			<label kind="synchronisation" x="-246" y="161">civCallPro[action.survivor]!</label>
			<label kind="assignment" x="-246" y="178">civilians[action.survivor].civToHelp=action.victim,
civilians[action.survivor].proToCall=action.professional</label>
			<nail x="-297" y="187"/>
		</transition>
		<transition id="id32">
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-272" y="-8">!action.doNothing</label>
		</transition>
		<transition id="id33">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="-145" y="-144">action.doNothing</label>
			<label kind="assignment" x="-144" y="-127">clearDetectionData()</label>
		</transition>
		<transition id="id34">
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="assignment" x="-425" y="-153">evaluateAction()</label>
		</transition>
		<transition id="id35">
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-655" y="-263">start?</label>
			<label kind="assignment" x="-748" y="-246">currentPos=initDrones[id]</label>
		</transition>
		<transition id="id36">
			<source ref="id25"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-323" y="-399">moveDrone[id]?</label>
			<label kind="assignment" x="-297" y="-374">move()</label>
			<nail x="-17" y="-374"/>
			<nail x="-510" y="-374"/>
		</transition>
		<transition id="id37">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-442" y="-263">detect[id]?</label>
			<label kind="assignment" x="-476" y="-246">detectCivInDanger()</label>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>const id_civ_t id</parameter>
		<declaration>//Coordinates_t currentPos;
//double finishTime = -1;


const int assistanceTime=civAssistanceTime;
int timeToHelp;

clock burningTimer;
clock helpingTimer;

Coordinates_t getCurrPos(){
    return civilians[id].currentPosition;
}

void setCurrPos(Coordinates_t pos){
    civilians[id].currentPosition.row = pos.row;
    civilians[id].currentPosition.column = pos.column;
}

id_civ_t getCivToHelp(){
    return civilians[id].civToHelp;
}    

id_pro_t getProToCall(){
    return civilians[id].proToCall;
}    

void resetCivilian(){
    Coordinates_t defPos;
    setCurrPos(defPos);
    civilians[id].civToHelp=0;
    civilians[id].proToCall=0;
    timeToHelp=0;
    civilians[id].isInDanger=false;
    civilians[id].isOnTheGrid=false;
    civilians[id].civToHelp=0;
    civilians[id].proToCall=0;  
}



void move(){
    //random move
    //Coordinates pos = randomMove(currentPos,id);
    
    //to closest exit
    Coordinates_t currentPos= getCurrPos();

    Coordinates_t closestExit = getClosestExit(currentPos);//can be computed only one time
    Coordinates_t pos ;
    pos= moveToExit(currentPos,closestExit,id);

    grid[currentPos.row][currentPos.column].civilian=-1;
    grid[pos.row][pos.column].civilian=id;
    currentPos=pos;
    civilians[id].currentPosition=pos;
}

void die(){
    Coordinates_t currentPos= getCurrPos();
    noHelpNeeded(id);
    increaseCasualties();
    grid[currentPos.row][currentPos.column].civilian=-1;
    //finishTime=globalTime;
    resetCivilian();
}

void escape(){
    Coordinates_t currentPos= getCurrPos();
    increaseSurvivors();
    grid[currentPos.row][currentPos.column].civilian=-1;
    resetCivilian();
    //finishTime=globalTime;
}

void getTimeToHelpCivilian(){
    Coordinates_t currentPos= getCurrPos();
    timeToHelp = distance(currentPos,civilians[getCivToHelp()].currentPosition) + assistanceTime;
}

void sendInfoToPro(){
    professionals[getProToCall()].caller=id;
    professionals[getProToCall()].victimToSave=getCivToHelp();
}


</declaration>
		<location id="id38" x="-510" y="-25">
			<name x="-493" y="-42">canMove</name>
		</location>
		<location id="id39" x="-510" y="-263">
			<committed/>
		</location>
		<location id="id40" x="102" y="-263">
			<committed/>
		</location>
		<location id="id41" x="-511" y="-739">
			<name x="-603" y="-756">burning</name>
			<label kind="invariant" x="-739" y="-739">burningTimer&lt;=burningTime</label>
		</location>
		<location id="id42" x="561" y="-263">
			<name x="551" y="-297">safe</name>
		</location>
		<location id="id43" x="-892" y="-263">
			<urgent/>
		</location>
		<location id="id44" x="-103" y="-484">
			<name x="-212" y="-493">beingHelped</name>
			<label kind="invariant" x="-197" y="-450">burningTimer&lt;=burningTime</label>
		</location>
		<location id="id45" x="-408" y="68">
			<committed/>
		</location>
		<location id="id46" x="-807" y="68">
			<name x="-884" y="59">callPro</name>
			<committed/>
		</location>
		<location id="id47" x="-408" y="382">
			<name x="-442" y="408">helpingCiv</name>
			<label kind="invariant" x="-638" y="374">helpingTimer&lt;=timeToHelp</label>
		</location>
		<location id="id48" x="595" y="-739">
			<name x="585" y="-773">dead</name>
		</location>
		<location id="id49" x="-807" y="391">
			<name x="-790" y="374">waitingPro</name>
		</location>
		<location id="id50" x="-144" y="297">
			<name x="-187" y="314">otherCivDied</name>
			<label kind="invariant" x="-238" y="254">helpingTimer&lt;=timeToHelp</label>
		</location>
		<init ref="id43"/>
		<transition id="id51">
			<source ref="id50"/>
			<target ref="id40"/>
			<label kind="guard" x="-119" y="280">helpingTimer==timeToHelp</label>
			<label kind="assignment" x="-85" y="297">timeToHelp=0</label>
			<nail x="102" y="297"/>
		</transition>
		<transition id="id52">
			<source ref="id49"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-501" y="501">saveCivilian[id]?</label>
			<nail x="-807" y="493"/>
			<nail x="102" y="493"/>
		</transition>
		<transition id="id53">
			<source ref="id46"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-799" y="187">helpRequest[getProToCall()]!</label>
			<label kind="assignment" x="-799" y="204">sendInfoToPro()</label>
		</transition>
		<transition id="id54">
			<source ref="id47"/>
			<target ref="id50"/>
			<label kind="synchronisation" x="-357" y="297">died[getCivToHelp()]?</label>
		</transition>
		<transition id="id55">
			<source ref="id47"/>
			<target ref="id40"/>
			<label kind="guard" x="-187" y="391">helpingTimer==timeToHelp</label>
			<label kind="synchronisation" x="-187" y="408">saveCivilian[getCivToHelp()]!</label>
			<label kind="assignment" x="-187" y="425">timeToHelp=0</label>
			<nail x="102" y="382"/>
		</transition>
		<transition id="id56">
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-399" y="144">startHelping[getCivToHelp()]!</label>
			<label kind="assignment" x="-399" y="161">getTimeToHelpCivilian(),
helpingTimer=0</label>
		</transition>
		<transition id="id57">
			<source ref="id38"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-926" y="-51">civCallPro[id]?</label>
			<label kind="assignment" x="-926" y="-34">civilians[id].isBusy=true,
civilians[getCivToHelp()].isBusy=true</label>
		</transition>
		<transition id="id58">
			<source ref="id38"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-416" y="-24">civHelpCiv[id]?</label>
			<label kind="assignment" x="-416" y="-8">civilians[id].isBusy=true,
civilians[getCivToHelp()].isBusy=true</label>
		</transition>
		<transition id="id59">
			<source ref="id44"/>
			<target ref="id48"/>
			<label kind="guard" x="221" y="-603">burningTimer == burningTime</label>
			<label kind="synchronisation" x="221" y="-586">died[id]!</label>
			<label kind="assignment" x="221" y="-569">die()</label>
		</transition>
		<transition id="id60">
			<source ref="id41"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="-289" y="-637">startHelping[id]?</label>
			<label kind="assignment" x="-289" y="-620">civilians[id].isBusy=true</label>
		</transition>
		<transition id="id61">
			<source ref="id43"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="-773" y="-306">start?</label>
			<label kind="assignment" x="-773" y="-289">setCurrPos(initCivilians[id])</label>
		</transition>
		<transition id="id62">
			<source ref="id40"/>
			<target ref="id42"/>
			<label kind="assignment" x="203" y="-263">escape()</label>
		</transition>
		<transition id="id63">
			<source ref="id41"/>
			<target ref="id48"/>
			<label kind="guard" x="-204" y="-782">burningTimer == burningTime</label>
			<label kind="assignment" x="-119" y="-764">die()</label>
		</transition>
		<transition id="id64">
			<source ref="id44"/>
			<target ref="id40"/>
			<label kind="guard" x="24" y="-374">burningTimer &lt; burningTime</label>
			<label kind="synchronisation" x="24" y="-399">saveCivilian[id]?</label>
			<label kind="assignment" x="24" y="-425">noHelpNeededAt(getCurrPos())</label>
		</transition>
		<transition id="id65">
			<source ref="id39"/>
			<target ref="id41"/>
			<label kind="guard" x="-749" y="-586">!isCloseToExit(getCurrPos()) &amp;&amp;
isCloseToFire(getCurrPos())</label>
			<label kind="assignment" x="-749" y="-628">burningTimer=0,
neededHelpAt(getCurrPos())</label>
		</transition>
		<transition id="id66">
			<source ref="id39"/>
			<target ref="id40"/>
			<label kind="guard" x="-332" y="-288">isCloseToExit(getCurrPos())</label>
		</transition>
		<transition id="id67">
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="guard" x="-442" y="-144">!isCloseToExit(getCurrPos()) &amp;&amp;
!isCloseToFire(getCurrPos())</label>
			<nail x="-467" y="-136"/>
		</transition>
		<transition id="id68">
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="-705" y="-161">moveCivilian[id]?</label>
			<label kind="assignment" x="-654" y="-135">move()</label>
			<nail x="-544" y="-136"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Controller</name>
		<declaration>// Place local declarations here.
clock moveTimer;



int counter;

void initGrid(){
    
    for ( i : id_civ_t)
        civilians[i].isOnTheGrid=true;

    //empty grid
    for (i : row_t){
        for(j : col_t){
        grid[i][j].civilian=-1;
        grid[i][j].professional=-1;
        grid[i][j].drone=-1;
        grid[i][j].onFire=false;
        grid[i][j].isExit=false;
        }
    }

    //init fires
    for (i : int[0,Nfires-1])
        {
            Coordinates_t fire = initFires[i];
            grid[fire.row][fire.column].onFire = true;
        }

    //init exits
    for (i : int[0,Nexits-1])
        {
            Coordinates_t safeExit = initExits[i];
            grid[safeExit.row][safeExit.column].isExit = true;
        }

    //init civilians
    for (i : id_civ_t)
        {
            Coordinates_t civilian = initCivilians[i];
            grid[civilian.row][civilian.column].civilian = i;
            civilians[i].currentPosition=civilian;
        }

    //init professionals
    for (i : id_pro_t)
        {
            Coordinates_t professional = initProfessionals[i];
            grid[professional.row][professional.column].professional = i;
            professionals[i].currentPosition=professional;
        }

    //init drones
    for (i : id_dro_t)
        {
            Coordinates_t drone = initDrones[i];
            grid[drone.row][drone.column].drone = i;
        }

}

void clearData(){
    randomSeed=0;
    moveTimer=0;
    randomTime=0;
    for (i : id_pro_t)
        {
            
            professionals[i].isBusy=false;
            professionals[i].caller=0;
            professionals[i].victimToSave=0;
        }
    
    for (i : id_civ_t)
        {
           
            civilians[i].isInDanger=false;
            civilians[i].isBusy=false;
            civilians[i].isOnTheGrid=false;
            civilians[i].civToHelp=0;
            civilians[i].proToCall=0;
        }
}
bool canCivMove(id_civ_t id){
    return civilians[id].isOnTheGrid &amp;&amp; !civilians[id].isBusy &amp;&amp; !civilians[id].isInDanger;
}

bool canProMove(id_pro_t id){
    return !professionals[id].isBusy;
}

bool finished(){
    return casualties + survivors == Ncivilians;
}

</declaration>
		<location id="id69" x="-1190" y="51">
			<name x="-1224" y="17">starting</name>
			<urgent/>
		</location>
		<location id="id70" x="-561" y="-127">
			<name x="-680" y="-136">droneDetect</name>
			<urgent/>
		</location>
		<location id="id71" x="-161" y="-127">
			<name x="-212" y="-110">moveCivilians</name>
			<urgent/>
		</location>
		<location id="id72" x="212" y="-127">
			<name x="152" y="-110">moveProfessionals</name>
			<urgent/>
		</location>
		<location id="id73" x="561" y="-127">
			<name x="586" y="-135">moveDrones</name>
			<urgent/>
		</location>
		<location id="id74" x="-561" y="51">
			<name x="-595" y="8">waitTick</name>
			<label kind="invariant" x="-603" y="68">moveTimer&lt;=1</label>
		</location>
		<location id="id75" x="-561" y="-340">
			<name x="-612" y="-374">waitingDetection</name>
			<urgent/>
		</location>
		<location id="id76" x="552" y="-374">
			<urgent/>
		</location>
		<location id="id77" x="-161" y="-340">
			<urgent/>
		</location>
		<location id="id78" x="212" y="-306">
			<urgent/>
		</location>
		<location id="id79" x="-161" y="-527">
			<urgent/>
		</location>
		<location id="id80" x="-875" y="51">
			<urgent/>
		</location>
		<location id="id81" x="-561" y="246">
			<name x="-535" y="238">finish</name>
			<label kind="invariant" x="-680" y="238">moveTimer&lt;=1</label>
		</location>
		<location id="id82" x="212" y="-535">
			<urgent/>
		</location>
		<init ref="id69"/>
		<transition id="id83">
			<source ref="id78"/>
			<target ref="id82"/>
			<label kind="guard" x="153" y="-408">!canProMove(counter)</label>
		</transition>
		<transition id="id84">
			<source ref="id72"/>
			<target ref="id78"/>
			<label kind="guard" x="-17" y="-246">counter &lt; Nprofessionals</label>
		</transition>
		<transition id="id85">
			<source ref="id81"/>
			<target ref="id81"/>
			<label kind="guard" x="-612" y="297">moveTimer==1</label>
			<label kind="assignment" x="-612" y="314">moveTimer=0</label>
			<nail x="-603" y="297"/>
			<nail x="-527" y="297"/>
		</transition>
		<transition id="id86">
			<source ref="id74"/>
			<target ref="id81"/>
			<label kind="guard" x="-552" y="127">finished()</label>
			<label kind="assignment" x="-552" y="144">initGrid(),
clearData()</label>
		</transition>
		<transition id="id87">
			<source ref="id80"/>
			<target ref="id74"/>
			<label kind="synchronisation" x="-748" y="25">start!</label>
		</transition>
		<transition id="id88">
			<source ref="id77"/>
			<target ref="id79"/>
			<label kind="guard" x="-246" y="-442">!canCivMove(counter)</label>
		</transition>
		<transition id="id89">
			<source ref="id77"/>
			<target ref="id79"/>
			<label kind="guard" x="-450" y="-467">canCivMove(counter)</label>
			<label kind="synchronisation" x="-476" y="-450">moveCivilian[counter]!</label>
			<nail x="-289" y="-382"/>
			<nail x="-289" y="-501"/>
		</transition>
		<transition id="id90">
			<source ref="id79"/>
			<target ref="id71"/>
			<label kind="assignment" x="-59" y="-348">counter++</label>
			<nail x="-68" y="-459"/>
			<nail x="-68" y="-263"/>
		</transition>
		<transition id="id91">
			<source ref="id82"/>
			<target ref="id72"/>
			<label kind="assignment" x="289" y="-255">counter++</label>
			<nail x="289" y="-459"/>
			<nail x="289" y="-238"/>
		</transition>
		<transition id="id92">
			<source ref="id78"/>
			<target ref="id82"/>
			<label kind="guard" x="17" y="-518">canProMove(counter)</label>
			<label kind="synchronisation" x="-42" y="-501">moveProfessional[counter]!</label>
			<nail x="144" y="-348"/>
			<nail x="144" y="-450"/>
		</transition>
		<transition id="id93">
			<source ref="id71"/>
			<target ref="id77"/>
			<label kind="guard" x="-331" y="-272">counter &lt; Ncivilians</label>
		</transition>
		<transition id="id94">
			<source ref="id76"/>
			<target ref="id73"/>
			<label kind="assignment" x="603" y="-272">counter++</label>
			<nail x="595" y="-255"/>
		</transition>
		<transition id="id95">
			<source ref="id73"/>
			<target ref="id76"/>
			<label kind="guard" x="374" y="-340">counter&lt;Ndrones</label>
			<label kind="synchronisation" x="374" y="-323">moveDrone[counter]!</label>
			<nail x="518" y="-263"/>
		</transition>
		<transition id="id96">
			<source ref="id75"/>
			<target ref="id70"/>
			<label kind="assignment" x="-510" y="-246">counter++</label>
			<nail x="-518" y="-246"/>
		</transition>
		<transition id="id97">
			<source ref="id70"/>
			<target ref="id75"/>
			<label kind="guard" x="-748" y="-246">counter&lt;Ndrones</label>
			<label kind="synchronisation" x="-756" y="-263">detect[counter]!</label>
			<nail x="-603" y="-246"/>
		</transition>
		<transition id="id98">
			<source ref="id74"/>
			<target ref="id70"/>
			<label kind="guard" x="-552" y="-17">!finished() &amp;&amp; moveTimer==1</label>
			<label kind="assignment" x="-552" y="-76">moveTimer=0,
counter=0,
randomTime++</label>
		</transition>
		<transition id="id99">
			<source ref="id73"/>
			<target ref="id74"/>
			<label kind="guard" x="-119" y="25">counter == Ndrones</label>
			<nail x="561" y="51"/>
		</transition>
		<transition id="id100">
			<source ref="id72"/>
			<target ref="id73"/>
			<label kind="guard" x="272" y="-153">counter==Nprofessionals</label>
			<label kind="assignment" x="331" y="-127">counter=0</label>
		</transition>
		<transition id="id101">
			<source ref="id71"/>
			<target ref="id72"/>
			<label kind="guard" x="-68" y="-153">counter == Ncivilians</label>
			<label kind="assignment" x="-17" y="-127">counter=0</label>
		</transition>
		<transition id="id102">
			<source ref="id70"/>
			<target ref="id71"/>
			<label kind="guard" x="-433" y="-153">counter == Ndrones</label>
			<label kind="assignment" x="-399" y="-127">counter=0</label>
		</transition>
		<transition id="id103">
			<source ref="id69"/>
			<target ref="id80"/>
			<label kind="select" x="-1172" y="0">randomN : int[0,randomness-1]</label>
			<label kind="assignment" x="-1071" y="59">initGrid(),
globalTime=0,
moveTimer=0,
randomSeed=randomN</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Controller,Drone,Civilian,Professional;

</system>
	<queries>
		<option key="--diagnostic" value="0"/>
		<query>
			<formula>//Model correctness
</formula>
			<comment/>
		</query>
		<query>
			<formula>Controller.moveTimer == 0 --&gt; Controller.moveTimer == 1</formula>
			<comment>check if there are zeno path</comment>
			<result outcome="success" type="quality" timestamp="2024-07-16 17:20:44 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>check if there is any deadlock</comment>
			<option key="--diagnostic" value="0"/>
			<result outcome="success" type="quality" timestamp="2024-07-18 15:15:29 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>Controller.starting --&gt; Controller.finish</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; (forall (i:id_civ_t) Civilian(i).safe)</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-07-19 12:23:34 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; exists (i:id_civ_t) Civilian(i).callPro</formula>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; exists (i:id_civ_t) Civilian(i).helpingCiv</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-07-18 11:43:33 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; exists(i:id_dro_t) Drone(i).actionNeeded</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-07-19 12:00:59 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>MANDATORY PROPERTIES</comment>
		</query>
		<query>
			<formula>E&lt;&gt; globalTime&lt;=50 and survivorsPerc&gt;=80</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-07-19 15:45:03 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; globalTime&lt;=50 and survivorsPerc &gt;=60</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-07-19 16:00:59 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
	</queries>
</nta>
