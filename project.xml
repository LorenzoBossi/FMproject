<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.




//CONFIGURATIONS

//GRID
const int Ncolumns = 10;
const int Nrows = 12;

const int Ndrones = 2;
const int Ncivilians = 3;
const int Nprofessionals = 2;
 
const int Nexits = 1;
const int Nfires = 3;


typedef int[0,Ncivilians-1] id_civ_t;
typedef int[0,Nprofessionals-1] id_pro_t;
typedef int[0,Ndrones-1] id_dro_t;

typedef int[0,Nrows-1] row_t;
typedef int[0,Ncolumns-1] col_t;

typedef struct{
    row_t row;
    col_t column; 
} Coordinates;


const Coordinates initCivilians[Ncivilians] = {
{0,0},
{5,7},
{0,1}
};

const Coordinates initProfessionals[Nprofessionals] = {
{3,4},
{9,7}
};

const Coordinates initDrones[Ndrones] = {
{0,5},
{5,0}
};

const Coordinates initFires[Nfires] = {
{7,5},
{7,6},
{7,7}
};

const Coordinates initExits[Nexits] = {
{9,9}
};


//Assistance

const int droneRadius = 2; //Nv 
const int burningTime = 10; //Tv
const int proAssistanceTime = 3; //Tfr 
const int civAssistanceTime = 4; //Tzr










//Definitions

typedef struct
{
    int[-1,Ncivilians - 1] civilian;
    int[-1,Nprofessionals - 1] professional;
    int[-1,Ndrones - 1] drone;
    bool onFire;
    bool isExit;
} Cell;

//channels
chan detect[Ndrones];
chan moveDrone[Ndrones];
chan moveCivilian[Ncivilians];
chan moveProfessional[Nprofessionals];

//clocks
clock globalTime;


Cell grid[Nrows][Ncolumns];




int distance(Coordinates p1, Coordinates p2){
    return abs(p1.row-p2.row)+abs(p1.column-p2.column);
}

bool isCloseToFire(Coordinates point){
    int x,y;
    if(grid[point.row][point.column].onFire)
        return true;
    for(i : int[-1,1]){
        for(j: int[-1,1]){
            x= point.row+i;
            y= point.column+j;
            if(x&gt;=0 &amp;&amp; x&lt; Nrows  &amp;&amp;  y&gt;=0 &amp;&amp; y&lt;Ncolumns){
                if(grid[x][y].onFire)
                    return true;
            }

        }
    }
    return false;
}

bool isCloseToExit(Coordinates point){
    int x,y;
    if(grid[point.row][point.column].isExit)
        return true;
    for(i : int[-1,1]){
        for(j: int[-1,1]){
            x= point.row+i;
            y= point.column+j;
            if(x&gt;=0 &amp;&amp; x&lt; Nrows  &amp;&amp;  y&gt;=0 &amp;&amp; y&lt;Ncolumns){
                if(grid[x][y].isExit)
                    return true;
            }

        }
    }
    return false;
}



</declaration>
	<template>
		<name>Professional</name>
		<parameter>const id_pro_t id</parameter>
		<location id="id0" x="-510" y="0">
		</location>
		<location id="id1" x="-187" y="0">
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id0"/>
			<nail x="-348" y="-127"/>
		</transition>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-425" y="-25">moveProfessional[id]?</label>
		</transition>
	</template>
	<template>
		<name>Drone</name>
		<parameter>const id_dro_t id</parameter>
		<location id="id4" x="-518" y="-34">
		</location>
		<location id="id5" x="-297" y="-34">
			<urgent/>
		</location>
		<location id="id6" x="-93" y="-34">
			<urgent/>
		</location>
		<init ref="id4"/>
		<transition id="id7">
			<source ref="id6"/>
			<target ref="id4"/>
			<nail x="-297" y="-212"/>
		</transition>
		<transition id="id8">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-255" y="-51">moveDrone[id]?</label>
		</transition>
		<transition id="id9">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-450" y="-51">detect[id]?</label>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>const id_civ_t id</parameter>
		<location id="id10" x="-476" y="0">
		</location>
		<location id="id11" x="-195" y="0">
			<urgent/>
		</location>
		<init ref="id10"/>
		<transition id="id12">
			<source ref="id11"/>
			<target ref="id10"/>
			<nail x="-348" y="-136"/>
		</transition>
		<transition id="id13">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-391" y="-25">moveCivilian[id]?</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Clock</name>
		<declaration>// Place local declarations here.
clock moveTimer;

id_civ_t civilians[Ncivilians-1];
id_pro_t professionals[Ncivilians-1];
int[0,Ncivilians] civiliansEscaping;

//CAN PROFESSIONALS DIE???
int[0,Nprofessionals+Ncivilians] casualties;
int[0,Nprofessionals+Ncivilians] survivors;

int counter;

void initGrid(){
    
    //empty grid
    for (i : row_t){
        for(j : col_t){
        grid[i][j].civilian=-1;
        grid[i][j].professional=-1;
        grid[i][j].drone=-1;
        grid[i][j].onFire=false;
        grid[i][j].isExit=false;
        }
    }

    //init fires
    for (i : int[0,Nfires-1])
        {
            Coordinates fire = initFires[i];
            grid[fire.row][fire.column].onFire = true;
        }

    //init exits
    for (i : int[0,Nexits-1])
        {
            Coordinates safeExit = initExits[i];
            grid[safeExit.row][safeExit.column].isExit = true;
        }

    //init civilians
    for (i : id_civ_t)
        {
            Coordinates civilian = initCivilians[i];
            grid[civilian.row][civilian.column].civilian = i;
        }

    //init professionals
    for (i : id_pro_t)
        {
            Coordinates professional := initProfessionals[i];
            grid[professional.row][professional.column].professional := i;
        }

    //init drones
    for (i : id_dro_t)
        {
            Coordinates drone = initDrones[i];
            grid[drone.row][drone.column].drone = i;
        }

}

</declaration>
		<location id="id14" x="-1020" y="-8">
			<name x="-1030" y="-42">start</name>
		</location>
		<location id="id15" x="-705" y="-8">
			<name x="-765" y="17">countCasualties</name>
			<urgent/>
		</location>
		<location id="id16" x="-561" y="-127">
			<name x="-680" y="-136">droneDetect</name>
			<urgent/>
		</location>
		<location id="id17" x="-144" y="-136">
			<name x="-195" y="-119">moveCivilians</name>
			<urgent/>
		</location>
		<location id="id18" x="187" y="-136">
			<name x="127" y="-119">moveProfessionals</name>
			<urgent/>
		</location>
		<location id="id19" x="561" y="-136">
			<name x="586" y="-144">moveDrones</name>
			<urgent/>
		</location>
		<location id="id20" x="-153" y="110">
			<name x="-187" y="67">waitTick</name>
			<label kind="invariant" x="-195" y="127">moveTimer&lt;=1</label>
		</location>
		<location id="id21" x="-561" y="-340">
			<urgent/>
		</location>
		<location id="id22" x="552" y="-374">
			<urgent/>
		</location>
		<location id="id23" x="-153" y="-459">
			<urgent/>
		</location>
		<location id="id24" x="187" y="-348">
			<label kind="comments" x="85" y="-391">CAN PROFESSIONALS DIE/ESCAPE?</label>
			<urgent/>
		</location>
		<init ref="id14"/>
		<transition id="id25">
			<source ref="id24"/>
			<target ref="id18"/>
			<label kind="assignment" x="221" y="-289">counter++</label>
			<nail x="212" y="-238"/>
		</transition>
		<transition id="id26">
			<source ref="id18"/>
			<target ref="id24"/>
			<label kind="guard" x="-42" y="-280">counter &lt; Nprofessionals</label>
			<label kind="synchronisation" x="-42" y="-297">moveProfessional[counter]!</label>
			<nail x="161" y="-238"/>
		</transition>
		<transition id="id27">
			<source ref="id23"/>
			<target ref="id17"/>
			<label kind="assignment" x="-110" y="-382">counter++</label>
			<nail x="-110" y="-331"/>
		</transition>
		<transition id="id28">
			<source ref="id17"/>
			<target ref="id23"/>
			<label kind="guard" x="-425" y="-365">counter &lt; civiliansEscaping</label>
			<label kind="synchronisation" x="-467" y="-391">moveCivilian[civilians[counter]]!</label>
			<nail x="-204" y="-323"/>
		</transition>
		<transition id="id29">
			<source ref="id22"/>
			<target ref="id19"/>
			<label kind="assignment" x="586" y="-323">counter++</label>
			<nail x="595" y="-255"/>
		</transition>
		<transition id="id30">
			<source ref="id19"/>
			<target ref="id22"/>
			<label kind="guard" x="374" y="-340">counter&lt;Ndrones</label>
			<label kind="synchronisation" x="374" y="-323">moveDrone[counter]!</label>
			<nail x="518" y="-263"/>
		</transition>
		<transition id="id31">
			<source ref="id21"/>
			<target ref="id16"/>
			<label kind="assignment" x="-510" y="-263">counter++</label>
			<nail x="-518" y="-246"/>
		</transition>
		<transition id="id32">
			<source ref="id16"/>
			<target ref="id21"/>
			<label kind="guard" x="-748" y="-246">counter&lt;Ndrones</label>
			<label kind="synchronisation" x="-756" y="-263">detect[counter]!</label>
			<nail x="-603" y="-246"/>
		</transition>
		<transition id="id33">
			<source ref="id20"/>
			<target ref="id15"/>
			<label kind="guard" x="-467" y="85">moveTimer==1</label>
			<label kind="assignment" x="-467" y="68">moveTimer=0</label>
		</transition>
		<transition id="id34">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="416" y="-51">counter == Ndrones</label>
			<nail x="272" y="17"/>
		</transition>
		<transition id="id35">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="272" y="-161">counter==Nprofessionals</label>
			<label kind="assignment" x="357" y="-136">counter=0</label>
		</transition>
		<transition id="id36">
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-76" y="-161">counter == civiliansEscaping</label>
			<label kind="assignment" x="-17" y="-136">counter=0</label>
		</transition>
		<transition id="id37">
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-374" y="-161">counter == Ndrones</label>
			<label kind="assignment" x="-331" y="-127">counter=0</label>
		</transition>
		<transition id="id38">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="assignment" x="-612" y="-68">counter=0</label>
		</transition>
		<transition id="id39">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="assignment" x="-969" y="-8">initGrid(),
globalTime=0,
moveTimer=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Clock,Drone,Civilian,Professional;

</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
