<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.




//----- CONFIGURATIONS -----

//STOCHASTIC FEATURES
//must be [0,1]
const double pFail = 0.1;
const double pListen= 0.8;

//GRID

//BIG GRID SCENARIO
const int Nrows = 20;
const int Ncolumns = 20;

const bool disableDrones=false;
const int Ndrones = 2;
const int Ncivilians = 11;
const int Nprofessionals = 5;
 
const int Nexits = 8;
const int Nfires = 23;


typedef int[0,Ncivilians-1] id_civ_t;
typedef int[0,Nprofessionals-1] id_pro_t;
typedef int[0,Ndrones-1] id_dro_t;
typedef int[0,Nrows-1] row_t;
typedef int[0,Ncolumns-1] col_t;

typedef struct{
    row_t row;
    col_t column; 
} Coordinates_t;


const Coordinates_t initCivilians[Ncivilians] = {
{5,5},
{7,14},
{8,2},
{8,8},
{9,11},
{11,4},
{11,12},
{11,18},
{12,9},
{14,6},
{15,10}
};

const Coordinates_t initProfessionals[Nprofessionals] = {
{2,2},
{2,17},
{10,7},
{13,19},
{17,5}
};

const Coordinates_t initDrones[Ndrones] = {

{4,15},
{15,4}

};

//Fire cells must be contiguous!!!
const Coordinates_t initFires[Nfires] = {
{3,9},
{3,10},
{4,8},
{4,9},
{4,10},
{4,11},
{5,8},
{5,9},
{5,10},
{5,11},
{5,12},
{6,9},
{6,10},
{6,11},
{7,10},

{17,14},
{16,13},
{16,14},
{16,15},
{15,14},
{15,15},
{15,16},
{14,15}

};

//Exits must be on the boundary of the grid
const Coordinates_t initExits[Nexits] = {
{0,3},
{0,4},
{0,15},
{0,16},
{19,3},
{19,4},
{19,15},
{19,16}
};


//Assistance

const int droneRadius = 4; //Nv 
const int burningTime = 30; //Tv
const int proAssistanceTime = 5; //Tfr 
const int civAssistanceTime = 10; //Tzr

const int targetFireDistance=2;

const int droneLimitDecisionDistance=5;

//const int timeLimit=200; not implemented
const int randomness=1;

/*
const int Nrows = 10;
const int Ncolumns = 8;

const bool disableDrones=false;
const int Ndrones = 2;
const int Ncivilians = 4;
const int Nprofessionals = 1;
 
const int Nexits = 1;
const int Nfires = 3;


typedef int[0,Ncivilians-1] id_civ_t;
typedef int[0,Nprofessionals-1] id_pro_t;
typedef int[0,Ndrones-1] id_dro_t;
typedef int[0,Nrows-1] row_t;
typedef int[0,Ncolumns-1] col_t;

typedef struct{
    row_t row;
    col_t column; 
} Coordinates_t;


const Coordinates_t initCivilians[Ncivilians] = {
{0,0},
{4,3},
{3,5},
{0,7}
};

const Coordinates_t initProfessionals[Nprofessionals] = {
{5,5}
};

const Coordinates_t initDrones[Ndrones] = {
{4,5},
{7,4}
};

//Fire cells must be contiguous
const Coordinates_t initFires[Nfires] = {
{7,5},
{7,6},
{7,7}
};

//Exits must be on the boundary of the grid
const Coordinates_t initExits[Nexits] = {
{8,7}
};


//Assistance

const int droneRadius = 3; //Nv 
const int burningTime = 8; //Tv
const int proAssistanceTime = 2; //Tfr 
const int civAssistanceTime = 3; //Tzr

const int targetFireDistance=2;

const int droneLimitDecisionDistance=4;

//const int timeLimit=200; not implemented
const int randomness=50;

*/
// ----- DECLARATIONS -----

typedef struct
{
    int[-1,Ncivilians - 1] civilian;
    int[-1,Nprofessionals - 1] professional;
    int[-1,Ndrones - 1] drone;
    bool onFire;
    bool isExit;
} Cell_t;

typedef struct
{
    bool isInDanger;
    bool isBusy;
    bool isOnTheGrid;
    Coordinates_t currentPosition;
    id_civ_t civToHelp;
    id_pro_t proToCall;
} Civilian_t;

typedef struct
{
    bool isBusy;
    Coordinates_t currentPosition;
    id_civ_t caller;
    id_civ_t victimToSave;
} Professional_t;

//channels
broadcast chan start;
broadcast chan detect[Ndrones]; 
broadcast chan moveDrone[Ndrones];
broadcast chan moveCivilian[Ncivilians];
broadcast chan moveProfessional[Nprofessionals];
broadcast chan startHelping[Ncivilians];
broadcast chan saveCivilian[Ncivilians]; 
broadcast chan died[Ncivilians];
broadcast chan civHelpCiv[Ncivilians];
broadcast chan civCallPro[Ncivilians];
broadcast chan helpRequest[Nprofessionals];

//clocks
clock globalTime;

int[0,randomness-1] randomSeed;
Cell_t grid[Nrows][Ncolumns];
Civilian_t civilians[Ncivilians];
Professional_t professionals[Nprofessionals];


//Broadcast channels trick
bool readyToDetect[Ndrones];
bool readyToMoveDrone[Ndrones];
bool readyToMoveCiv[Ncivilians];
bool readyToMovePro[Nprofessionals];
bool readyToBeHelped[Ncivilians];


int[0,Ncivilians] civInDanger=0;

int[0,Ncivilians] casualties=0;
int[0,Ncivilians] survivors=0;
int[0,100] survivorsPerc=0;
int[0,100] casualtiesPerc=0;

//Coordinates helpers
int distance(Coordinates_t p1, Coordinates_t p2){
    return abs(p1.row-p2.row)+abs(p1.column-p2.column);
}

bool isSamePlace(Coordinates_t c1, Coordinates_t c2){
    return c1.row == c2.row &amp;&amp; c1.column == c2.column;
}

//return the index of the help request
void neededHelpAt(Coordinates_t pos){
    civilians[grid[pos.row][pos.column].civilian].isInDanger=true;
    civInDanger++;
}

void noHelpNeededAt(Coordinates_t pos){
    civilians[grid[pos.row][pos.column].civilian].isInDanger=false;
    civInDanger--;
}

void noHelpNeeded(id_civ_t idCivilian){
    civilians[idCivilian].isInDanger=false;
    civInDanger--;
}


//even in diagonal?
bool isCloseToFire(Coordinates_t point){
    int x,y;
    if(grid[point.row][point.column].onFire)
        return true;
    for(i : int[-1,1]){
        for(j: int[-1,1]){
            x= point.row+i;
            y= point.column+j;
            if(x&gt;=0 &amp;&amp; x&lt; Nrows  &amp;&amp;  y&gt;=0 &amp;&amp; y&lt;Ncolumns){
                if(grid[x][y].onFire)
                    return true;
            }

        }
    }
    return false;
}

//even in diagonal?
bool isCloseToExit(Coordinates_t point){
    int x,y;
    if(grid[point.row][point.column].isExit)
        return true;
    for(i : int[-1,1]){
        for(j: int[-1,1]){
            x= point.row+i;
            y= point.column+j;
            if(x&gt;=0 &amp;&amp; x&lt; Nrows  &amp;&amp;  y&gt;=0 &amp;&amp; y&lt;Ncolumns){
                if(grid[x][y].isExit)
                    return true;
            }

        }
    }
    return false;
}

void increaseCasualties(){
    casualties++;
    casualtiesPerc=fint((1.0*casualties/Ncivilians)*100);
}

void increaseSurvivors(){
    survivors++;
    survivorsPerc=fint((1.0*survivors/Ncivilians)*100);
}



//MOVING STRATEGIES

bool isValidPosition(int row,int column){
    Cell_t cell;

    if(row &lt; 0 || column &lt; 0)
        return false;
    if(row &gt; Nrows-1 || column &gt; Ncolumns-1)
        return false;

    cell = grid[row][column];

    if(cell.civilian&gt;=0 || cell.professional&gt;=0)
        return false;

    //should never happen
    if(cell.onFire)
        return false;

    return true;
        
}

//id used for randomness
Coordinates_t randomMove(Coordinates_t currentPos, int id){
    bool validMove;
    int i=0;
    int inc;
    int rand;
    int x,y;
    Coordinates_t move;

    rand=(randomSeed ^ id) % 2;
    if (rand == 0)
        inc = +1;
    else
        inc = -1;

    randomSeed=(randomSeed+id) % randomness;

    rand = (randomSeed ^ id) % 4;
    
    randomSeed=(randomSeed+id) % randomness;
    do{
        y=currentPos.row;
        x=currentPos.column;

        //switch case not supperted
        if(rand == 0)
            //up
            y--;
        else if(rand == 1)
            //right
            x++;
        else if(rand == 2)
            //down
            y++;
        else if(rand == 3)
            //left
            x--;
        
        validMove=isValidPosition(y,x);

        if(!validMove){
            rand = (rand + inc) % 4;
            i++;
        }    


    }while(!validMove &amp;&amp; i&lt;4);
    
    if(validMove){
        move.row=y;
        move.column=x;
    }
    else
        //if no available moves
        move=currentPos;
     
    return move;
    
}

Coordinates_t moveToExit(Coordinates_t currentPos,Coordinates_t exitPos,int id){
     Coordinates_t move;
     int row = currentPos.row;
     int column = currentPos.column;

     if(abs(currentPos.row-exitPos.row) &gt; abs(currentPos.column-exitPos.column)) {
        //precedence to row movement
        if(currentPos.row-exitPos.row &gt; 0){
            row--; 
        }else{
            row++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            row=currentPos.row;
            if(currentPos.column-exitPos.column &gt; 0){
                column --;
            }else{
                column ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos,id);
            }
        }

    }else{
        //precedence to column movement
        if(currentPos.column-exitPos.column &gt; 0){
            column--; 
        }else{
            column++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            column=currentPos.column;
            if(currentPos.row-exitPos.row &gt; 0){
                row --;
            }else{
                row ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos,id);
            }


        }

    }
}

Coordinates_t moveToFire(Coordinates_t currentPos,Coordinates_t firePos,int id){
     Coordinates_t move;
     int row = currentPos.row;
     int column = currentPos.column;
     if(distance(currentPos,firePos)&lt;=targetFireDistance){
        return randomMove(currentPos,id);
     }

     if(abs(currentPos.row-firePos.row) &gt; abs(currentPos.column-firePos.column)) {
        //precedence to row movement
        if(currentPos.row-firePos.row &gt; 0){
            row--; 
        }else{
            row++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            row=currentPos.row;
            if(currentPos.column-firePos.column &gt; 0){
                column --;
            }else{
                column ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos,id);
            }
        }

    }else{
        //precedence to column movement
        if(currentPos.column-firePos.column &gt; 0){
            column--; 
        }else{
            column++;
        }
        if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
        }else{
            column=currentPos.column;
            if(currentPos.row-firePos.row &gt; 0){
                row --;
            }else{
                row ++;
            }
            if(isValidPosition(row,column)){
                move.row=row;
                move.column=column;
                return move;
            }else{
                return randomMove(currentPos,id);
            }


        }

    }
}

Coordinates_t getClosestExit(Coordinates_t pos){
    Coordinates_t min;
    int minDistance;
    int temp;
    int i;
    min= initExits[0];//suppose at least an exit
    minDistance = distance(pos,min);
    
    for( i=1; i&lt;Nexits-1; i++){
        temp=distance(pos,initExits[i]);
        if(temp&lt;minDistance){
            minDistance=temp;
            min=initExits[i];
        }      
    }
    
    return min;

}


Coordinates_t getClosestFire(Coordinates_t pos){
    Coordinates_t min;
    int minDistance;
    int temp;
    int i;
    min= initFires[0];//suppose at least an exit
    minDistance = distance(pos,min);
    
    for( i=1; i&lt;Nexits-1; i++){
        temp=distance(pos,initFires[i]);
        if(temp&lt;minDistance){
            minDistance=temp;
            min=initFires[i];
        }      
    }
    
    return min;

}



</declaration>
	<template>
		<name>Professional</name>
		<parameter>const id_pro_t id</parameter>
		<declaration>Coordinates_t currentPos;
id_civ_t civToHelp=0;
int timeToSave=0;

clock helpingTimer;


void move(){

    Coordinates_t pos;
    pos = randomMove(currentPos,id);

    grid[currentPos.row][currentPos.column].professional=-1;
    grid[pos.row][pos.column].professional=id;
    currentPos=pos;
}

bool someoneNearToHelp(){
    int i;
    for(i=0;i&lt;Ncivilians;i++){
        if(civilians[i].isInDanger  &amp;&amp; !civilians[i].isBusy &amp;&amp; civilians[i].isOnTheGrid){
            if(distance(currentPos, civilians[i].currentPosition)&lt;=1){
                return true;
            }
        }
    }
    return false;
}

void chooseCivToHelp(){
    int i,distanceToCiv;
    for(i=0;i&lt;Ncivilians;i++){
        if(civilians[i].isInDanger &amp;&amp; !civilians[i].isBusy &amp;&amp; civilians[i].isOnTheGrid){
            distanceToCiv=distance(currentPos, civilians[i].currentPosition);
            if(distanceToCiv &lt;=1){
                civToHelp=i;
                timeToSave=distanceToCiv + proAssistanceTime;
                civilians[i].isBusy=true;
                professionals[id].isBusy=true;
                return;
            }
        }
    }
   
}

id_civ_t getCaller(){
    return professionals[id].caller;
}

id_civ_t getVictimToSave(){
    return professionals[id].victimToSave;
}    

void setRequestTime(){
    id_civ_t caller = getCaller();
    id_civ_t victimToSave= getVictimToSave();
    timeToSave = distance(civilians[caller].currentPosition,currentPos)+distance(currentPos,civilians[victimToSave].currentPosition)+proAssistanceTime;
    
}


</declaration>
		<location id="id0" x="-442" y="17">
			<name x="-510" y="-17">canMove</name>
		</location>
		<location id="id1" x="59" y="17">
			<urgent/>
		</location>
		<location id="id2" x="-910" y="17">
			<urgent/>
		</location>
		<location id="id3" x="-442" y="271">
			<name x="-391" y="245">helping</name>
			<label kind="invariant" x="-426" y="262">helpingTimer&lt;=timeToSave</label>
		</location>
		<location id="id4" x="-443" y="501">
			<committed/>
		</location>
		<location id="id5" x="-782" y="-569">
			<label kind="invariant" x="-1029" y="-578">helpingTimer &lt;= timeToSave</label>
		</location>
		<location id="id6" x="-238" y="-569">
			<label kind="invariant" x="-204" y="-578">helpingTimer &lt;= timeToSave</label>
		</location>
		<location id="id7" x="-442" y="-255">
			<urgent/>
		</location>
		<location id="id8" x="-782" y="-348">
			<urgent/>
		</location>
		<init ref="id2"/>
		<transition id="id9">
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-1062" y="-450">startHelping[getVictimToSave()]!</label>
		</transition>
		<transition id="id10">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-289" y="-476">helpingTimer == timeToSave</label>
		</transition>
		<transition id="id11">
			<source ref="id7"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-433" y="-195">saveCivilian[getCaller()]!</label>
			<label kind="assignment" x="-433" y="-170">professionals[id].isBusy=false,
readyToMovePro[id]=true</label>
		</transition>
		<transition id="id12">
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="-671" y="-510">helpingTimer==timeToSave</label>
			<label kind="synchronisation" x="-671" y="-493">saveCivilian[getVictimToSave()]!</label>
		</transition>
		<transition id="id13">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-595" y="-595">died[getVictimToSave()]?</label>
		</transition>
		<transition id="id14">
			<source ref="id0"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-909" y="-246">helpRequest[id]?</label>
			<label kind="assignment" x="-909" y="-229">setRequestTime(),
helpingTimer=0,
professionals[id].isBusy=true,
readyToMovePro[id]=false</label>
		</transition>
		<transition id="id15">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="67" y="246">someoneNearToHelp()</label>
			<label kind="assignment" x="67" y="267">chooseCivToHelp()</label>
			<nail x="59" y="501"/>
		</transition>
		<transition id="id16">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-434" y="373">startHelping[civToHelp]!</label>
			<label kind="assignment" x="-434" y="390">helpingTimer=0</label>
		</transition>
		<transition id="id17">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-630" y="110">died[civToHelp]?</label>
			<label kind="assignment" x="-722" y="127">professionals[id].isBusy=false,
readyToMovePro[id]=true</label>
			<nail x="-476" y="110"/>
		</transition>
		<transition id="id18">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-392" y="102">helpingTimer==timeToSave</label>
			<label kind="synchronisation" x="-392" y="119">saveCivilian[civToHelp]!</label>
			<label kind="assignment" x="-391" y="135">professionals[id].isBusy=false,
readyToMovePro[id]=true</label>
			<nail x="-408" y="110"/>
		</transition>
		<transition id="id19">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-791" y="-8">start?</label>
			<label kind="assignment" x="-851" y="25">currentPos=initProfessionals[id],
readyToMovePro[id]=true</label>
		</transition>
		<transition id="id20">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-136" y="-127">!someoneNearToHelp()</label>
			<label kind="assignment" x="-136" y="-102">move(),
readyToMovePro[id]=true</label>
			<nail x="59" y="-102"/>
			<nail x="-212" y="-102"/>
		</transition>
		<transition id="id21">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-357" y="-8">moveProfessional[id]?</label>
			<label kind="assignment" x="-357" y="17">readyToMovePro[id]=false</label>
		</transition>
	</template>
	<template>
		<name>Drone</name>
		<parameter>const id_dro_t id</parameter>
		<declaration>Coordinates_t currentPos;

bool isGoingBack=false;

id_civ_t closeVictims[Ncivilians];
id_civ_t closeSurvivors[Ncivilians];

int[0,Ncivilians] victimsDetected=0,survivorsDetected=0;

typedef struct{
    bool doNothing;
    bool callProfessional;
    id_pro_t professional;
    id_civ_t survivor;
    id_civ_t victim;
}action_t;

action_t action;

Coordinates_t moveHorizontally(Coordinates_t currPos){
    Coordinates_t move;
    move.row=currPos.row;
    move.column=currPos.column;

    if(isGoingBack){
        if(currPos.column - droneRadius &lt;=0){
            isGoingBack=false;
            move.column++;
            return move;
        }
        move.column--;

    }else{
        if(currPos.column + droneRadius &gt;= Ncolumns-1){
            isGoingBack=true;
            move.column--;
            return move;
        }
        move.column++;
    }

    return move;

}

Coordinates_t moveVertically(Coordinates_t currPos){
    Coordinates_t move;
    move.row=currPos.row;
    move.column=currPos.column;

    if(isGoingBack){
        if(currPos.row - droneRadius &lt;=0){
            isGoingBack=false;
            move.row++;
            return move;
        }
        move.row--;

    }else{
        if(currPos.row + droneRadius &gt;= Nrows-1){
            isGoingBack=true;
            move.row--;
            return move;
        }
        move.row++;
    }

    return move;

}


void move(){
    Coordinates_t pos;
    pos = moveHorizontally(currentPos);
    grid[currentPos.row][currentPos.column].drone=-1;
    grid[pos.row][pos.column].drone=id;
    currentPos=pos;
}

void clearDetectionData(){
    id_civ_t emptyCiv;
    action_t emptyAction;
    int i;
    for(i=0; i&lt;victimsDetected; i++){
        closeVictims[i]=emptyCiv;
    }
    for(i=0; i&lt;survivorsDetected; i++){
        closeVictims[i]=emptyCiv;
    }
    victimsDetected=0;
    survivorsDetected=0;
    action=emptyAction;

}


//busy civ?
void detectCivInDanger(){
    int i;
    if(disableDrones){
        return;
    }
    clearDetectionData();
    for(i=0;i&lt;Ncivilians;i++){
            if(distance(civilians[i].currentPosition,currentPos)&lt;= droneRadius){
                if(civilians[i].isInDanger &amp;&amp; !civilians[i].isBusy){
                    closeVictims[victimsDetected]=i;
                    victimsDetected++;
                }else if(!civilians[i].isInDanger &amp;&amp; !civilians[i].isBusy &amp;&amp; civilians[i].isOnTheGrid){
                    closeSurvivors[survivorsDetected]=i;
                    survivorsDetected++;
                }
            }
        
    }
     
}


int getClosestFreePro(Coordinates_t position){
    int minDistance=Nrows+Ncolumns;
    int pro=-1;
    for(i : id_pro_t){
        if(!professionals[i].isBusy &amp;&amp; distance(position,professionals[i].currentPosition) &lt; minDistance){
            pro=i;
            minDistance=distance(position,professionals[i].currentPosition);
        }
    }
    return pro;

}

id_civ_t getClosestSurvivor(Coordinates_t position){
    int minDistance=Nrows+Ncolumns;
    id_civ_t civ,survivor;
    int i;
    for(i=0;i&lt;survivorsDetected;i++){
        survivor=closeSurvivors[i];
        if(distance(position,civilians[survivor].currentPosition) &lt; minDistance){
            civ=survivor;
            minDistance=distance(position,civilians[survivor].currentPosition);
        }
    }
    return civ;

}



void evaluateAction(){
    if(victimsDetected&gt;0 &amp;&amp; survivorsDetected&gt;0){
        id_civ_t victim,survivor;
        id_pro_t pro;
        int findPro;
        victim=closeVictims[0];
        survivor=getClosestSurvivor(civilians[victim].currentPosition);
        findPro=getClosestFreePro(civilians[survivor].currentPosition);

        action.survivor=survivor;
        action.victim=victim;
        action.callProfessional=false;
        action.doNothing=false;

        if(findPro&gt;=0){
            pro=findPro;
            if(distance(professionals[pro].currentPosition,civilians[survivor].currentPosition)&lt;=droneLimitDecisionDistance){
                action.professional=pro;
                action.callProfessional=true;
            }
        }
    }else
        action.doNothing=true;
}

void updateDetectedList(){
    int i;
    bool found;
    if(victimsDetected&gt;0){
        found=closeVictims[0]==action.victim;
        for(i=0;i&lt;victimsDetected-1;i++){
            if(found){
                closeVictims[i]=closeVictims[i+1];
            }else if(closeVictims[i]==action.victim){
                found=true;
            }
        }
        if(closeVictims[i]==action.survivor)
            found=true;
        if(found){ 
            victimsDetected--;
            closeVictims[victimsDetected]=0;
        }
    }
    if(survivorsDetected&gt;0){
        found=closeSurvivors[0]==action.survivor;
        for(i=0;i&lt;survivorsDetected-1;i++){
            if(found){
                closeSurvivors[i]=closeSurvivors[i+1];
            }else if(closeSurvivors[i]==action.survivor){
                found=true;
            }
        }
        if(closeSurvivors[i]==action.survivor)
            found=true;
        if(found){
            survivorsDetected--;
            closeSurvivors[survivorsDetected]=0;
        } 
    }

}

</declaration>
		<location id="id22" x="-510" y="-246">
			<name x="-535" y="-229">canDetect</name>
		</location>
		<location id="id23" x="-229" y="-127">
			<committed/>
		</location>
		<location id="id24" x="-799" y="-246">
			<urgent/>
		</location>
		<location id="id25" x="34" y="-246">
			<name x="51" y="-255">canMove</name>
			<urgent/>
		</location>
		<location id="id26" x="-229" y="-34">
			<name x="-212" y="-42">takingAction</name>
			<committed/>
		</location>
		<location id="id27" x="-229" y="51">
			<committed/>
		</location>
		<location id="id28" x="-229" y="340">
			<committed/>
		</location>
		<location id="id29" x="-272" y="-246">
			<committed/>
		</location>
		<branchpoint id="id30" x="-229" y="-246"/>
		<init ref="id24"/>
		<transition id="id31">
			<source ref="id22"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-450" y="-263">detect[id]?</label>
			<label kind="assignment" x="-484" y="-246">readyToDetect[id]=false</label>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id29"/>
			<target ref="id30"/>
		</transition>
		<transition id="id33">
			<source ref="id30"/>
			<target ref="id25"/>
			<label kind="assignment" x="-204" y="-246">readyToMoveDrone[id]=true</label>
			<label kind="probability" x="-136" y="-272">pFail</label>
		</transition>
		<transition id="id34">
			<source ref="id30"/>
			<target ref="id23"/>
			<label kind="assignment" x="-391" y="-195">detectCivInDanger()</label>
			<label kind="probability" x="-221" y="-195">1-pFail</label>
		</transition>
		<transition id="id35">
			<source ref="id28"/>
			<target ref="id26"/>
			<label kind="assignment" x="-892" y="153">updateDetectedList(),
evaluateAction()</label>
			<nail x="-714" y="340"/>
			<nail x="-714" y="-34"/>
		</transition>
		<transition id="id36">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="guard" x="-518" y="144">!action.callProfessional &amp;&amp;
readyToMoveCiv[action.survivor]</label>
			<label kind="synchronisation" x="-493" y="178">civHelpCiv[action.survivor]!</label>
			<label kind="assignment" x="-671" y="195">civilians[action.survivor].civToHelp=action.victim</label>
			<nail x="-212" y="195"/>
		</transition>
		<transition id="id37">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="guard" x="-195" y="127">action.callProfessional &amp;&amp;
readyToMoveCiv[action.survivor]</label>
			<label kind="synchronisation" x="-195" y="161">civCallPro[action.survivor]!</label>
			<label kind="assignment" x="-195" y="178">civilians[action.survivor].civToHelp=action.victim,
civilians[action.survivor].proToCall=action.professional</label>
			<nail x="-246" y="187"/>
		</transition>
		<transition id="id38">
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-221" y="-8">!action.doNothing</label>
		</transition>
		<transition id="id39">
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="-94" y="-144">action.doNothing</label>
			<label kind="assignment" x="-93" y="-127">clearDetectionData(),
readyToMoveDrone[id]=true</label>
		</transition>
		<transition id="id40">
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="assignment" x="-374" y="-102">evaluateAction()</label>
		</transition>
		<transition id="id41">
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-655" y="-263">start?</label>
			<label kind="assignment" x="-748" y="-246">currentPos=initDrones[id],
readyToDetect[id]=true</label>
		</transition>
		<transition id="id42">
			<source ref="id25"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-297" y="-399">moveDrone[id]?</label>
			<label kind="assignment" x="-297" y="-374">move(),
readyToDetect[id]=true,
readyToMoveDrone[id]=false</label>
			<nail x="34" y="-374"/>
			<nail x="-510" y="-374"/>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>const id_civ_t id</parameter>
		<declaration>//Coordinates_t currentPos;
//double finishTime = -1;


const int assistanceTime=civAssistanceTime;
int timeToHelp;

clock burningTimer;
clock helpingTimer;

Coordinates_t getCurrPos(){
    return civilians[id].currentPosition;
}

void setCurrPos(Coordinates_t pos){
    civilians[id].currentPosition.row = pos.row;
    civilians[id].currentPosition.column = pos.column;
}

id_civ_t getCivToHelp(){
    return civilians[id].civToHelp;
}    

id_pro_t getProToCall(){
    return civilians[id].proToCall;
}    

void resetCivilian(){
    Coordinates_t defPos;
    setCurrPos(defPos);
    civilians[id].civToHelp=0;
    civilians[id].proToCall=0;
    timeToHelp=0;
    civilians[id].isInDanger=false;
    civilians[id].isOnTheGrid=false;
    civilians[id].civToHelp=0;
    civilians[id].proToCall=0;  
}



void move(){
    //random move
    //Coordinates pos = randomMove(currentPos,id);
    
    //to closest exit
    Coordinates_t currentPos= getCurrPos();

    Coordinates_t closestExit = getClosestExit(currentPos);//can be computed only one time
    Coordinates_t pos ;
    pos= moveToExit(currentPos,closestExit,id);

    grid[currentPos.row][currentPos.column].civilian=-1;
    grid[pos.row][pos.column].civilian=id;
    currentPos=pos;
    civilians[id].currentPosition=pos;
}

void die(){
    Coordinates_t currentPos= getCurrPos();
    noHelpNeeded(id);
    increaseCasualties();
    grid[currentPos.row][currentPos.column].civilian=-1;
    //finishTime=globalTime;
    resetCivilian();
}

void escape(){
    Coordinates_t currentPos= getCurrPos();
    increaseSurvivors();
    grid[currentPos.row][currentPos.column].civilian=-1;
    resetCivilian();
    //finishTime=globalTime;
}

void getTimeToHelpCivilian(){
    Coordinates_t currentPos= getCurrPos();
    timeToHelp = distance(currentPos,civilians[getCivToHelp()].currentPosition) + assistanceTime;
}

void sendInfoToPro(){
    professionals[getProToCall()].caller=id;
    professionals[getProToCall()].victimToSave=getCivToHelp();
}


</declaration>
		<location id="id43" x="-561" y="-25">
			<name x="-544" y="-51">canMove</name>
		</location>
		<location id="id44" x="-561" y="-263">
			<label kind="comments" x="-383" y="-246">close even in diagonal??</label>
			<urgent/>
		</location>
		<location id="id45" x="136" y="-263">
			<urgent/>
		</location>
		<location id="id46" x="-561" y="-739">
			<name x="-653" y="-756">burning</name>
			<label kind="invariant" x="-789" y="-739">burningTimer&lt;=burningTime</label>
			<label kind="comments" x="-670" y="-824">readyToHelp[id] maybe not needed,

removed moveCivilian</label>
		</location>
		<location id="id47" x="561" y="-263">
			<name x="551" y="-297">safe</name>
		</location>
		<location id="id48" x="-892" y="-263">
			<urgent/>
		</location>
		<location id="id49" x="-103" y="-484">
			<name x="-212" y="-493">beingHelped</name>
			<label kind="invariant" x="-197" y="-450">burningTimer&lt;=burningTime</label>
		</location>
		<location id="id50" x="-331" y="212">
			<committed/>
		</location>
		<location id="id51" x="-799" y="213">
			<name x="-876" y="204">callPro</name>
			<committed/>
		</location>
		<location id="id52" x="-331" y="365">
			<name x="-382" y="382">helpingCiv</name>
			<label kind="invariant" x="-544" y="357">helpingTimer&lt;=timeToHelp</label>
		</location>
		<location id="id53" x="595" y="-739">
			<name x="585" y="-773">dead</name>
		</location>
		<location id="id54" x="-799" y="374">
			<name x="-782" y="357">waitingPro</name>
		</location>
		<location id="id55" x="-799" y="8">
			<committed/>
		</location>
		<location id="id56" x="-331" y="17">
			<committed/>
		</location>
		<location id="id57" x="-119" y="450">
			<label kind="invariant" x="-204" y="467">helpingTimer&lt;=timeToHelp</label>
		</location>
		<branchpoint id="id58" x="-331" y="85"/>
		<branchpoint id="id59" x="-799" y="85"/>
		<init ref="id48"/>
		<transition id="id60">
			<source ref="id57"/>
			<target ref="id45"/>
			<label kind="guard" x="-76" y="425">helpingTimer==timeToHelp</label>
			<label kind="assignment" x="-25" y="450">timeToHelp=0</label>
			<nail x="136" y="450"/>
		</transition>
		<transition id="id61">
			<source ref="id43"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="-450" y="-25">civHelpCiv[id]?</label>
		</transition>
		<transition id="id62">
			<source ref="id43"/>
			<target ref="id55"/>
			<label kind="synchronisation" x="-773" y="-42">civCallPro[id]?</label>
		</transition>
		<transition id="id63">
			<source ref="id58"/>
			<target ref="id43"/>
			<label kind="probability" x="-450" y="59">1-pListen</label>
			<nail x="-493" y="85"/>
		</transition>
		<transition id="id64">
			<source ref="id58"/>
			<target ref="id50"/>
			<label kind="assignment" x="-323" y="119">civilians[id].isBusy=true,
civilians[getCivToHelp()].isBusy=true,
readyToMoveCiv[id]=false</label>
			<label kind="probability" x="-399" y="136">pListen</label>
		</transition>
		<transition id="id65" controllable="false">
			<source ref="id56"/>
			<target ref="id58"/>
		</transition>
		<transition id="id66">
			<source ref="id59"/>
			<target ref="id43"/>
			<label kind="probability" x="-731" y="59">1-pListen</label>
			<nail x="-629" y="85"/>
		</transition>
		<transition id="id67">
			<source ref="id59"/>
			<target ref="id51"/>
			<label kind="assignment" x="-1147" y="119">civilians[id].isBusy=true,
civilians[getCivToHelp()].isBusy=true,
readyToMoveCiv[id]=false</label>
			<label kind="probability" x="-790" y="136">pListen</label>
		</transition>
		<transition id="id68" controllable="false">
			<source ref="id55"/>
			<target ref="id59"/>
		</transition>
		<transition id="id69">
			<source ref="id54"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-578" y="484">saveCivilian[id]?</label>
			<nail x="-799" y="519"/>
			<nail x="136" y="518"/>
		</transition>
		<transition id="id70">
			<source ref="id51"/>
			<target ref="id54"/>
			<label kind="guard" x="-790" y="247">readyToMovePro[getProToCall()]</label>
			<label kind="synchronisation" x="-790" y="264">helpRequest[getProToCall()]!</label>
			<label kind="assignment" x="-790" y="281">sendInfoToPro()</label>
		</transition>
		<transition id="id71">
			<source ref="id52"/>
			<target ref="id57"/>
			<label kind="synchronisation" x="-348" y="425">died[getCivToHelp()]?</label>
		</transition>
		<transition id="id72">
			<source ref="id52"/>
			<target ref="id45"/>
			<label kind="guard" x="-136" y="323">helpingTimer==timeToHelp</label>
			<label kind="synchronisation" x="-136" y="340">saveCivilian[getCivToHelp()]!</label>
			<label kind="assignment" x="-136" y="365">timeToHelp=0</label>
			<nail x="136" y="365"/>
		</transition>
		<transition id="id73">
			<source ref="id50"/>
			<target ref="id52"/>
			<label kind="synchronisation" x="-323" y="247">startHelping[getCivToHelp()]!</label>
			<label kind="assignment" x="-323" y="263">getTimeToHelpCivilian(),
helpingTimer=0</label>
		</transition>
		<transition id="id74">
			<source ref="id49"/>
			<target ref="id53"/>
			<label kind="guard" x="221" y="-603">burningTimer == burningTime</label>
			<label kind="synchronisation" x="221" y="-586">died[id]!</label>
			<label kind="assignment" x="221" y="-569">die()</label>
		</transition>
		<transition id="id75">
			<source ref="id46"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-289" y="-637">startHelping[id]?</label>
			<label kind="assignment" x="-289" y="-620">readyToBeHelped[id]=false,
civilians[id].isBusy=true</label>
		</transition>
		<transition id="id76">
			<source ref="id48"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="-824" y="-306">start?</label>
			<label kind="assignment" x="-824" y="-289">setCurrPos(initCivilians[id])</label>
		</transition>
		<transition id="id77">
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="assignment" x="203" y="-263">escape()</label>
		</transition>
		<transition id="id78">
			<source ref="id46"/>
			<target ref="id53"/>
			<label kind="guard" x="-204" y="-782">burningTimer == burningTime</label>
			<label kind="assignment" x="-204" y="-756">die(),
readyToBeHelped[id]=false</label>
		</transition>
		<transition id="id79">
			<source ref="id49"/>
			<target ref="id45"/>
			<label kind="guard" x="24" y="-374">burningTimer &lt; burningTime</label>
			<label kind="synchronisation" x="24" y="-399">saveCivilian[id]?</label>
			<label kind="assignment" x="24" y="-425">noHelpNeededAt(getCurrPos())</label>
		</transition>
		<transition id="id80">
			<source ref="id44"/>
			<target ref="id46"/>
			<label kind="guard" x="-833" y="-492">!isCloseToExit(getCurrPos()) &amp;&amp;
isCloseToFire(getCurrPos())</label>
			<label kind="assignment" x="-833" y="-569">burningTimer=0,
neededHelpAt(getCurrPos()),
readyToBeHelped[id]=true</label>
		</transition>
		<transition id="id81">
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="guard" x="-332" y="-288">isCloseToExit(getCurrPos())</label>
		</transition>
		<transition id="id82">
			<source ref="id44"/>
			<target ref="id43"/>
			<label kind="guard" x="-501" y="-144">!isCloseToExit(getCurrPos()) &amp;&amp;
!isCloseToFire(getCurrPos())</label>
			<label kind="assignment" x="-501" y="-110">readyToMoveCiv[id]=true</label>
			<nail x="-518" y="-136"/>
		</transition>
		<transition id="id83">
			<source ref="id43"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="-756" y="-161">moveCivilian[id]?</label>
			<label kind="assignment" x="-790" y="-144">move(),
readyToMoveCiv[id]=false</label>
			<nail x="-595" y="-136"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Controller</name>
		<declaration>// Place local declarations here.
clock moveTimer;



int counter;

void initGrid(){
    
    for ( i : id_civ_t)
        civilians[i].isOnTheGrid=true;

    //empty grid
    for (i : row_t){
        for(j : col_t){
        grid[i][j].civilian=-1;
        grid[i][j].professional=-1;
        grid[i][j].drone=-1;
        grid[i][j].onFire=false;
        grid[i][j].isExit=false;
        }
    }

    //init fires
    for (i : int[0,Nfires-1])
        {
            Coordinates_t fire = initFires[i];
            grid[fire.row][fire.column].onFire = true;
        }

    //init exits
    for (i : int[0,Nexits-1])
        {
            Coordinates_t safeExit = initExits[i];
            grid[safeExit.row][safeExit.column].isExit = true;
        }

    //init civilians
    for (i : id_civ_t)
        {
            Coordinates_t civilian = initCivilians[i];
            grid[civilian.row][civilian.column].civilian = i;
        }

    //init professionals
    for (i : id_pro_t)
        {
            Coordinates_t professional = initProfessionals[i];
            grid[professional.row][professional.column].professional = i;
        }

    //init drones
    for (i : id_dro_t)
        {
            Coordinates_t drone = initDrones[i];
            grid[drone.row][drone.column].drone = i;
        }

}

bool canCivMove(id_civ_t id){
    return civilians[id].isOnTheGrid &amp;&amp; !civilians[id].isBusy &amp;&amp; !civilians[id].isInDanger;
}

bool canProMove(id_pro_t id){
    return !professionals[id].isBusy;
}

bool finished(){
    return casualties + survivors == Ncivilians;
}

</declaration>
		<location id="id84" x="-1190" y="51">
			<name x="-1200" y="17">starting</name>
			<urgent/>
		</location>
		<location id="id85" x="-561" y="-127">
			<name x="-680" y="-136">droneDetect</name>
			<urgent/>
		</location>
		<location id="id86" x="-161" y="-127">
			<name x="-212" y="-110">moveCivilians</name>
			<urgent/>
		</location>
		<location id="id87" x="212" y="-127">
			<name x="152" y="-110">moveProfessionals</name>
			<urgent/>
		</location>
		<location id="id88" x="561" y="-127">
			<name x="586" y="-135">moveDrones</name>
			<urgent/>
		</location>
		<location id="id89" x="-561" y="51">
			<name x="-595" y="8">waitTick</name>
			<label kind="invariant" x="-603" y="68">moveTimer&lt;=1</label>
		</location>
		<location id="id90" x="-561" y="-340">
			<name x="-612" y="-374">waitingDetection</name>
			<urgent/>
		</location>
		<location id="id91" x="552" y="-374">
			<urgent/>
		</location>
		<location id="id92" x="-161" y="-340">
			<urgent/>
		</location>
		<location id="id93" x="212" y="-306">
			<label kind="comments" x="101" y="-578">CAN PROFESSIONALS DIE/ESCAPE?</label>
			<urgent/>
		</location>
		<location id="id94" x="-161" y="-527">
			<urgent/>
		</location>
		<location id="id95" x="-875" y="51">
			<urgent/>
		</location>
		<location id="id96" x="-561" y="246">
			<name x="-535" y="238">finish</name>
			<label kind="invariant" x="-680" y="238">moveTimer&lt;=1</label>
		</location>
		<location id="id97" x="212" y="-535">
			<urgent/>
		</location>
		<init ref="id84"/>
		<transition id="id98">
			<source ref="id93"/>
			<target ref="id97"/>
			<label kind="guard" x="153" y="-408">!canProMove(counter)</label>
		</transition>
		<transition id="id99">
			<source ref="id87"/>
			<target ref="id93"/>
			<label kind="guard" x="-17" y="-246">counter &lt; Nprofessionals</label>
		</transition>
		<transition id="id100">
			<source ref="id96"/>
			<target ref="id96"/>
			<label kind="guard" x="-612" y="297">moveTimer==1</label>
			<label kind="assignment" x="-612" y="314">moveTimer=0</label>
			<nail x="-603" y="297"/>
			<nail x="-527" y="297"/>
		</transition>
		<transition id="id101">
			<source ref="id89"/>
			<target ref="id96"/>
			<label kind="guard" x="-561" y="127">finished()</label>
			<label kind="assignment" x="-561" y="144">initGrid(),
randomSeed=0,
moveTimer=0</label>
			<label kind="comments" x="-442" y="144">initGrid to reset everything for performance</label>
		</transition>
		<transition id="id102">
			<source ref="id95"/>
			<target ref="id89"/>
			<label kind="synchronisation" x="-748" y="25">start!</label>
		</transition>
		<transition id="id103">
			<source ref="id92"/>
			<target ref="id94"/>
			<label kind="guard" x="-246" y="-442">!canCivMove(counter)</label>
		</transition>
		<transition id="id104">
			<source ref="id92"/>
			<target ref="id94"/>
			<label kind="guard" x="-476" y="-476">canCivMove(counter) &amp;&amp;
readyToMoveCiv[counter]</label>
			<label kind="synchronisation" x="-467" y="-433">moveCivilian[counter]!</label>
			<nail x="-289" y="-382"/>
			<nail x="-289" y="-501"/>
		</transition>
		<transition id="id105">
			<source ref="id94"/>
			<target ref="id86"/>
			<label kind="assignment" x="-59" y="-348">counter++</label>
			<nail x="-68" y="-459"/>
			<nail x="-68" y="-263"/>
		</transition>
		<transition id="id106">
			<source ref="id97"/>
			<target ref="id87"/>
			<label kind="assignment" x="289" y="-255">counter++</label>
			<nail x="289" y="-459"/>
			<nail x="289" y="-238"/>
		</transition>
		<transition id="id107">
			<source ref="id93"/>
			<target ref="id97"/>
			<label kind="guard" x="-34" y="-501">canProMove(counter) &amp;&amp;
readyToMovePro[counter]</label>
			<label kind="synchronisation" x="-34" y="-518">moveProfessional[counter]!</label>
			<nail x="144" y="-348"/>
			<nail x="144" y="-450"/>
		</transition>
		<transition id="id108">
			<source ref="id86"/>
			<target ref="id92"/>
			<label kind="guard" x="-331" y="-272">counter &lt; Ncivilians</label>
		</transition>
		<transition id="id109">
			<source ref="id91"/>
			<target ref="id88"/>
			<label kind="assignment" x="603" y="-272">counter++</label>
			<nail x="595" y="-255"/>
		</transition>
		<transition id="id110">
			<source ref="id88"/>
			<target ref="id91"/>
			<label kind="guard" x="365" y="-340">counter&lt;Ndrones &amp;&amp;
readyToMoveDrone[counter]</label>
			<label kind="synchronisation" x="365" y="-297">moveDrone[counter]!</label>
			<nail x="518" y="-263"/>
		</transition>
		<transition id="id111">
			<source ref="id90"/>
			<target ref="id85"/>
			<label kind="assignment" x="-510" y="-246">counter++</label>
			<nail x="-518" y="-246"/>
		</transition>
		<transition id="id112">
			<source ref="id85"/>
			<target ref="id90"/>
			<label kind="guard" x="-773" y="-246">counter&lt;Ndrones &amp;&amp;
readyToDetect[counter]</label>
			<label kind="synchronisation" x="-756" y="-263">detect[counter]!</label>
			<nail x="-603" y="-246"/>
		</transition>
		<transition id="id113">
			<source ref="id89"/>
			<target ref="id85"/>
			<label kind="guard" x="-552" y="-43">!finished() &amp;&amp; moveTimer==1</label>
			<label kind="assignment" x="-552" y="-85">moveTimer=0,
counter=0</label>
		</transition>
		<transition id="id114">
			<source ref="id88"/>
			<target ref="id89"/>
			<label kind="guard" x="-119" y="25">counter == Ndrones</label>
			<nail x="561" y="51"/>
		</transition>
		<transition id="id115">
			<source ref="id87"/>
			<target ref="id88"/>
			<label kind="guard" x="272" y="-153">counter==Nprofessionals</label>
			<label kind="assignment" x="331" y="-127">counter=0</label>
		</transition>
		<transition id="id116">
			<source ref="id86"/>
			<target ref="id87"/>
			<label kind="guard" x="-68" y="-153">counter == Ncivilians</label>
			<label kind="assignment" x="-17" y="-127">counter=0</label>
		</transition>
		<transition id="id117">
			<source ref="id85"/>
			<target ref="id86"/>
			<label kind="guard" x="-433" y="-153">counter == Ndrones</label>
			<label kind="assignment" x="-399" y="-127">counter=0</label>
		</transition>
		<transition id="id118">
			<source ref="id84"/>
			<target ref="id95"/>
			<label kind="assignment" x="-1071" y="59">initGrid(),
globalTime=0,
moveTimer=0,
randomSeed=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Controller,Drone,Civilian,Professional;

</system>
	<queries>
		<option key="--diagnostic" value="0"/>
		<query>
			<formula>//Model correctness
</formula>
			<comment/>
		</query>
		<query>
			<formula>Clock.moveTimer == 0 --&gt; Clock.moveTimer == 1</formula>
			<comment>check if there are zeno path</comment>
			<result outcome="success" type="quality" timestamp="2024-06-17 14:45:15 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>check if there is any deadlock</comment>
			<option key="--diagnostic" value="0"/>
		</query>
		<query>
			<formula>Clock.starting --&gt; Clock.finish</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-17 14:48:39 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i:id_civ_t) Civilian(i).safe</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-13 18:37:39 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; exists (i:id_civ_t) Civilian(i).callPro</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-14 11:03:30 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; exists (i:id_civ_t) Civilian(i).helpingCiv</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-14 11:03:40 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; exists(i:id_dro_t) Drone(i).actionNeeded</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-06-14 10:44:58 +0200">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=1000] (&lt;&gt;Civilian(0).dead)</formula>
			<comment/>
			<result outcome="success" type="quantity" value="0.226595 ± 0.047323 (95% CI)" timestamp="2024-06-17 15:05:00 +0200">
				<option key="--diagnostic" value="0"/>
				<details>0.226595 ± 0.047323 (95% CI)</details>
				<plot title="Probability Density Distribution" xaxis="run duration in time" yaxis="probability density">
					<series title="density" type="b(0.444444)" color="0x0000ff" encoding="csv">20.0,0.007097791798107256
20.444444444444443,0.0
20.88888888888889,0.0
21.333333333333332,0.0
21.77777777777778,0.021293375394321766
22.22222222222222,0.0
22.666666666666668,0.11356466876971609
23.11111111111111,0.0
23.555555555555557,0.0
24.0,0.36198738170347006
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">23.633802816901408,0.0
23.633802816901408,0.36198738170347006
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.44444, bucket count=10
Runs: 317 in total, 71 (22.397%) displayed, 246 (77.603%) remaining
Span of displayed sample: [20, 24]
Mean estimate of displayed sample: 23.634 ± 0.16612 (95% CI)</comment>
				</plot>
				<plot title="Probability Density Confidence Intervals" xaxis="run duration in time" yaxis="probability density">
					<series title="upper limit" type="b(0.444444)" color="0xa0a0ff" encoding="csv">20.0,0.01744994633488758
20.444444444444443,0.011569397511906217
20.88888888888889,0.011569397511906217
21.333333333333332,0.011569397511906217
21.77777777777778,0.02740642264578876
22.22222222222222,0.011569397511906217
22.666666666666668,0.0806728242639423
23.11111111111111,0.011569397511906217
23.555555555555557,0.011569397511906217
24.0,0.20604665263599256
					</series>
					<series title="lower limit" type="b(0.444444)" color="0x0000ff" encoding="csv">20.0,7.986371288251936E-5
20.444444444444443,0.0
20.88888888888889,0.0
21.333333333333332,0.0
21.77777777777778,0.0019559154196784703
22.22222222222222,0.0
22.666666666666668,0.029121488707231958
23.11111111111111,0.0
23.555555555555557,0.0
24.0,0.12219523252447008
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">23.633802816901408,0.0
23.633802816901408,0.4636049684309833
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.44444, bucket count=10
Runs: 317 in total, 71 (22.397%) displayed, 246 (77.603%) remaining
Span of displayed sample: [20, 24]
Mean estimate of displayed sample: 23.634 ± 0.16612 (95% CI)</comment>
				</plot>
				<plot title="Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="probability" type="b(0.444444)" color="0x0000ff" encoding="csv">20.0,0.0031545741324921135
20.444444444444443,0.0
20.88888888888889,0.0
21.333333333333332,0.0
21.77777777777778,0.00946372239747634
22.22222222222222,0.0
22.666666666666668,0.050473186119873815
23.11111111111111,0.0
23.555555555555557,0.0
24.0,0.1608832807570978
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">23.633802816901408,0.0
23.633802816901408,0.1608832807570978
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.44444, bucket count=10
Runs: 317 in total, 71 (22.397%) displayed, 246 (77.603%) remaining
Span of displayed sample: [20, 24]
Mean estimate of displayed sample: 23.634 ± 0.16612 (95% CI)</comment>
				</plot>
				<plot title="Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="b(0.444444)" color="0xa0a0ff" encoding="csv">20.0,0.01744994633488758
20.444444444444443,0.011569397511906217
20.88888888888889,0.011569397511906217
21.333333333333332,0.011569397511906217
21.77777777777778,0.02740642264578876
22.22222222222222,0.011569397511906217
22.666666666666668,0.0806728242639423
23.11111111111111,0.011569397511906217
23.555555555555557,0.011569397511906217
24.0,0.20604665263599256
					</series>
					<series title="lower limit" type="b(0.444444)" color="0x0000ff" encoding="csv">20.0,7.986371288251936E-5
20.444444444444443,0.0
20.88888888888889,0.0
21.333333333333332,0.0
21.77777777777778,0.0019559154196784703
22.22222222222222,0.0
22.666666666666668,0.029121488707231958
23.11111111111111,0.0
23.555555555555557,0.0
24.0,0.12219523252447008
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">23.633802816901408,0.0
23.633802816901408,0.20604665263599256
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.44444, bucket count=10
Runs: 317 in total, 71 (22.397%) displayed, 246 (77.603%) remaining
Span of displayed sample: [20, 24]
Mean estimate of displayed sample: 23.634 ± 0.16612 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Distribution" xaxis="run duration in time" yaxis="probability">
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.0,0.0
20.444444444444443,0.0031545741324921135
20.88888888888889,0.0031545741324921135
21.333333333333332,0.0031545741324921135
21.77777777777778,0.0031545741324921135
22.22222222222222,0.012618296529968454
22.666666666666668,0.012618296529968454
23.11111111111111,0.06309148264984227
23.555555555555557,0.06309148264984227
24.0,0.06309148264984227
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">23.633802816901408,0.0
23.633802816901408,0.2239747634069401
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.44444, bucket count=10
Runs: 317 in total, 71 (22.397%) displayed, 246 (77.603%) remaining
Span of displayed sample: [20, 24]
Mean estimate of displayed sample: 23.634 ± 0.16612 (95% CI)</comment>
				</plot>
				<plot title="Cumulative Probability Confidence Intervals" xaxis="run duration in time" yaxis="probability">
					<series title="upper limit" type="k" color="0x0000dd" encoding="csv">20.0,0.011569397511906217
20.444444444444443,0.01744994633488758
20.88888888888889,0.01744994633488758
21.333333333333332,0.01744994633488758
21.77777777777778,0.01744994633488758
22.22222222222222,0.0319909735808327
22.666666666666668,0.0319909735808327
23.11111111111111,0.09576020698288933
23.555555555555557,0.09576020698288933
24.0,0.09576020698288933
					</series>
					<series title="lower limit" type="k" color="0xdd0000" encoding="csv">20.0,0.0
20.444444444444443,7.986371288251936E-5
20.88888888888889,7.986371288251936E-5
21.333333333333332,7.986371288251936E-5
21.77777777777778,7.986371288251936E-5
22.22222222222222,0.0034484736170935617
22.666666666666668,0.0034484736170935617
23.11111111111111,0.03896031319751902
23.555555555555557,0.03896031319751902
24.0,0.03896031319751902
					</series>
					<series title="cumulative" type="l" color="0x000000" encoding="csv">20.0,0.0
20.444444444444443,0.0031545741324921135
20.88888888888889,0.0031545741324921135
21.333333333333332,0.0031545741324921135
21.77777777777778,0.0031545741324921135
22.22222222222222,0.012618296529968454
22.666666666666668,0.012618296529968454
23.11111111111111,0.06309148264984227
23.555555555555557,0.06309148264984227
24.0,0.06309148264984227
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">23.633802816901408,0.0
23.633802816901408,0.2239747634069401
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.44444, bucket count=10
Runs: 317 in total, 71 (22.397%) displayed, 246 (77.603%) remaining
Span of displayed sample: [20, 24]
Mean estimate of displayed sample: 23.634 ± 0.16612 (95% CI)</comment>
				</plot>
				<plot title="Frequency Histogram" xaxis="run duration in time" yaxis="count">
					<series title="count" type="b(0.444444)" color="0x0000ff" encoding="csv">20.0,1.0
20.444444444444443,0.0
20.88888888888889,0.0
21.333333333333332,0.0
21.77777777777778,3.0
22.22222222222222,0.0
22.666666666666668,16.0
23.11111111111111,0.0
23.555555555555557,0.0
24.0,51.0
					</series>
					<series title="average" type="pl" color="0x00dd00" encoding="csv">23.633802816901408,0.0
23.633802816901408,51.0
					</series>
					<comment>Parameters: α=0.05, ε=0.05, bucket width=0.44444, bucket count=10
Runs: 317 in total, 71 (22.397%) displayed, 246 (77.603%) remaining
Span of displayed sample: [20, 24]
Mean estimate of displayed sample: 23.634 ± 0.16612 (95% CI)</comment>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=1000] ([] forall (i:id_civ_t) Civilian(i).dead)</formula>
			<comment/>
			<result outcome="success" type="interval" value="≤ 0.0499441 (95% CI)" timestamp="2024-06-17 15:05:42 +0200">
				<option key="--diagnostic" value="0"/>
				<details>≤ 0.0499441 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>MANDATORY PROPERTIES</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100] (&lt;&gt; (1.0*survivors/Ncivilians) &gt;= 0.80)</formula>
			<comment/>
			<option key="--diagnostic" value="0"/>
			<result outcome="success" type="interval" value="≤ 0.0499441 (95% CI)" timestamp="2024-07-15 18:29:59 +0200">
				<option key="--diagnostic" value="0"/>
				<details>≤ 0.0499441 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
